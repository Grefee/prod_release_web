[{"C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\index.js":"1","C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\routes\\root.jsx":"2","C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\routes\\admin.jsx":"3","C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\routes\\admin\\Report.jsx":"4","C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\routes\\admin\\Config.jsx":"5","C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\routes\\home\\Linka.jsx":"6"},{"size":1583,"mtime":1676456206593,"results":"7","hashOfConfig":"8"},{"size":1900,"mtime":1676387747502,"results":"9","hashOfConfig":"8"},{"size":5324,"mtime":1676386934336,"results":"10","hashOfConfig":"8"},{"size":7245,"mtime":1676384721343,"results":"11","hashOfConfig":"8"},{"size":13047,"mtime":1676386349648,"results":"12","hashOfConfig":"8"},{"size":10458,"mtime":1676388999384,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1qht6yd",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\index.js",["38"],[],"C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\routes\\root.jsx",["39","40","41"],[],"import React, { useState ,useEffect } from \"react\";\r\nimport _ from 'lodash';\r\nimport Linka from \"./home/Linka.jsx\";\r\n\r\nimport {\r\n  QueryClient,\r\n  QueryClientProvider,\r\n  useQuery,\r\n} from \"@tanstack/react-query\";\r\n\r\n\r\n\r\nasync function getTypyLinek(IP) {\r\n  const response = await fetch(`http://${IP}:3005/getTypyLinek`);\r\n      return response.json();\r\n  }\r\n\r\n\r\nconst IP = '172.23.30.216'\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nexport default function Home() {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <MainHome />\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n\r\n\r\nfunction MainHome() {\r\n  const {isLoading: reportsLoad, data: typyLinek} = useQuery({queryKey: ['typyLinek'], queryFn: async () => await getTypyLinek(IP), initialData: []});\r\n\r\n    const [selectedLinka, setSelectedLinka] = useState(null);\r\n\r\n    const handleButtonClick = id => {\r\n        setSelectedLinka(id);\r\n      };\r\n\r\n    const goToHome = () => {\r\n    setSelectedLinka(null);\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"flex flex-col items-center w-full\">\r\n            {!selectedLinka ? (\r\n                <div>\r\n                    <div className=\"bg-gradient-to-r from-gray-700 to-gray-500 pt-16 pb-16 pl-8 pr-8 text-3xl w-screen text-center text-white \">Vyberte Linku</div>\r\n                        <div className=\"flex flex-col items-center\">\r\n                        {typyLinek.map((linka) => {\r\n                            return <button className=\"pt-5 pb-5 pl-5 pr-5 bg-green-200 w-fit rounded-full mt-5\" id={linka.PLine_id}  onClick={() => handleButtonClick(linka.PLine_id)}> {linka.PLine_name}</button>\r\n                            \r\n                        })}\r\n                        \r\n                    </div>\r\n                </div>\r\n             ) : (\r\n            <Linka apiIP={IP} linkaId={selectedLinka} goToHome={goToHome} />\r\n            )}\r\n        </div>\r\n    );\r\n}","C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\routes\\admin.jsx",["42","43","44","45","46"],[],"import { useEffect, useState } from \"react\"\r\nimport {\r\n    QueryClient,\r\n    QueryClientProvider,\r\n    useQuery,\r\n    useMutation,\r\n  } from \"@tanstack/react-query\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport { useSearchParams,\r\n            Link } from \"react-router-dom\";\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\nconst IP = '172.23.30.216'\r\nconst conf = ['reports', 'config']\r\nasync function getTypyLinek (IP) {\r\n    let response = await fetch(`http://${IP}:3005/getTypyLinek`);\r\n    return response.json();\r\n  }\r\n\r\n  function AddNewLine({refetchTypyLinek}){\r\n    const { status, error, mutate } = useMutation({\r\n      mutationFn: ({newProductionLineName}) => {\r\n        return fetch(`http://${IP}:3005/createNewLine`, {\r\n          method: 'POST',\r\n          body: JSON.stringify({PLine_name: newProductionLineName, }),\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        \r\n      },\r\n      onSuccess: () => {\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: 'Success',\r\n          text: 'New Production Line added successfully'\r\n        });\r\n        refetchTypyLinek();\r\n      },\r\n      onError: () =>\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'Failed to add new Production Line, something went wrong'\r\n      })\r\n    });\r\n  \r\n   const addNewLine = () => {\r\n    Swal.fire({\r\n      title: 'Add new Production Line',\r\n      html: `\r\n        <textarea id=\"productionLine-name\" class=\"swal2-textarea\" placeholder=\"ProdutionLine name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n      `,\r\n      showCancelButton: true,\r\n      confirmButtonText: 'Confirm',\r\n      cancelButtonText: 'Cancel',\r\n      preConfirm: async () => {\r\n        let newProductionLineName = document.getElementById('productionLine-name').value;\r\n         mutate({newProductionLineName});\r\n       },\r\n     });\r\n   };\r\n   return (\r\n    <button className={`pt-2 pb-2 pl-4 pr-4 bg-slate-200 hover:bg-slate-400 w-fit rounded-full mt-5`} \r\n    id='newLine' onClick={addNewLine}\r\n    >\r\n    Add new line\r\n  </button>\r\n   );\r\n  };\r\n\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nexport default function Admin() {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <Administrator />\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nfunction Administrator() {\r\n    \r\n    const {isLoading, data, refetch: refetchTypyLinek} = useQuery({queryKey: ['typyLinek'], queryFn: async () => await getTypyLinek(IP), initialData: []});\r\n\r\n    const [lineNumber, setLineNumber] = useState(null)\r\n    const [config, setConfig] = useState(null)\r\n\r\n    const handleBtnLineId = (id) => {\r\n        console.log('btnClicked: '+id);\r\n        setLineNumber(id);\r\n        setConfig(null) \r\n      };\r\n\r\n    const handleConfigChange = (newConfig) => {\r\n        setConfig(newConfig);\r\n    };\r\n\r\n\r\n\r\nif (isLoading) {\r\n    return <span>Loading...</span>\r\n    }\r\nreturn (\r\n<div className=\"flex flex-col items-center w-full\">\r\n            <div className=\"bg-gradient-to-r from-gray-700 to-gray-500 pt-16 pb-16 pl-8 pr-8 text-3xl w-screen text-center text-white \">\r\n                <a>Admin Page</a>              \r\n            </div>\r\n            <div className=\"flex flex-row h-screen w-screen  \">\r\n                <div className=\"bg-white w-1/12 border-r-2\">\r\n                    <div className=\"flex flex-col items-center\">\r\n                        {data.map((linka) => {\r\n                            return <Link className={`pt-2 pb-2 pl-4 pr-4 hover:bg-slate-400 w-fit rounded-full mt-5 ${ linka.PLine_id === lineNumber ? \"bg-blue-500 text-white\" : \"bg-slate-200\" }`}\r\n                        \r\n                            key={linka.PLine_id}  \r\n                            id={linka.PLine_id}\r\n                            onClick={() => handleBtnLineId(linka.PLine_id)}\r\n                            to={`/admin/${linka.PLine_id}`}\r\n                                disabled={isLoading}\r\n                                > {linka.PLine_name}\r\n                            </Link>})}\r\n                            <AddNewLine refetchTypyLinek={refetchTypyLinek}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bg-white w-1/12 border-r-2\">\r\n                    <div className=\"flex flex-col items-center\">\r\n                        {conf.map((conf) => {\r\n                            return <Link  className={`pt-2 pb-2 pl-4 pr-4 hover:bg-slate-400 w-fit rounded-full mt-5\r\n                            ${ conf === config ? \"bg-blue-500 text-white\" : \"bg-slate-200\" }`} id={conf} key={conf}\r\n                            to={\r\n                                lineNumber === null\r\n                                ? void(0)\r\n                                : `/admin/${lineNumber}/${conf}`\r\n\r\n                            }\r\n                            onClick = {\r\n                                lineNumber === null\r\n                                ?(e) => e.preventDefault()\r\n                                :() => handleConfigChange(conf) \r\n\r\n                              } \r\n                            > {conf}\r\n                            </Link>}\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <Outlet />\r\n\r\n            </div>\r\n</div>\r\n)};\r\n\r\n\r\n\r\n\r\n","C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\routes\\admin\\Report.jsx",["47","48"],[],"import {\r\n    QueryClient,\r\n    QueryClientProvider,\r\n    useQuery,\r\n  } from \"@tanstack/react-query\";\r\n  import Swal from 'sweetalert2'\r\n  import { useState } from \"react\"\r\n\r\n  import { useParams } from 'react-router-dom';\r\n\r\nasync function getAdminReports(IP, lineId) {\r\n    const response = await fetch(`http://${IP}:3005/adminReports`, {\r\n        method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                PLine_id: lineId,\r\n            }),\r\n        });\r\n        return response.json();\r\n    }\r\n\r\nasync function getNameOfLine(IP, lineId) {\r\n    const response = await fetch(`http://${IP}:3005/getNameOfLine`, {\r\n        method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                PLine_id: lineId,\r\n            }),\r\n        });\r\n        return response.json();\r\n    }\r\n    \r\nconst createExport = async (lineId) => {\r\n    try {\r\n        Swal.fire({\r\n        title: \"Please wait\",\r\n        text: \"Your file is being fetched\",\r\n        onOpen: () => {\r\n            Swal.showLoading();\r\n        },\r\n        });\r\n    \r\n        const response = await fetch(`http://${IP}:3005/createExport`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({PLine_id: lineId}),\r\n        });\r\n    \r\n        if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n        }\r\n    \r\n        const blob = await response.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const link = document.createElement(\"a\");\r\n        link.style.display = \"none\";\r\n        link.href = url;\r\n        link.setAttribute(\"download\", \"report.xlsx\");\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    \r\n        Swal.close();\r\n    } catch (error) {\r\n        console.error(error);\r\n        Swal.fire({\r\n        title: \"Error\",\r\n        text: \"Failed to fetch the file\",\r\n        icon: \"error\",\r\n        });\r\n    } finally {\r\n    }\r\n    };\r\n\r\n\r\n\r\nconst IP = '172.23.30.216'\r\n\r\n\r\n\r\n\r\nfunction Reports() {\r\n    const { lineId } = useParams();\r\n    const {isLoading: reportsLoad, data: reports} = useQuery({queryKey: ['reports'], queryFn: async () => await getAdminReports(IP, lineId), initialData: []});\r\n    const {isLoading: lineNameLoad, data: lineName} = useQuery({queryKey: ['lineName'], queryFn: async () => await getNameOfLine(IP, lineId), initialData: []});\r\n\r\n    const [filter, setFilter] = useState('')\r\n\r\n    function filterData(event) {\r\n        setFilter(event.target.value);\r\n        console.log(filter)\r\n      }\r\n    function clearFilter(){\r\n        setFilter('')\r\n    }\r\n    \r\nif (lineNameLoad || reportsLoad) {\r\n    return <span>Loading...</span>\r\n    }\r\n\r\n    return (\r\n    \r\n        <div className=\"ml-16 mt-16 w-11/12\">\r\n            {console.log(reports)}\r\n            <div className=\" relative border w-5/6 rounded-3xl overflow-hidden\">\r\n                <table className=\"w-full text-lg text-left text-black-500 dark:text-gray-400 overflow-hidden \">\r\n                    <thead>\r\n                        <tr className=\"bg-slate-500 border-b\">\r\n                            <td className=\"pl-5 pt-2 pb-2 text-center\" colspan=\"3\">{lineName.length > 0 ? lineName[0].PLine_name : 'N/A'}</td>\r\n                        </tr>\r\n                        <tr className=\"bg-slate-500 border-b\">\r\n                            <td className=\"pl-5 pt-2 pb-2\">Enter date:</td>\r\n                            <td className=\"pl-5 pt-2 pb-2\"><input type=\"date\" id=\"filter-date\" value={filter} onChange={(e)=>filterData(e)} /></td>\r\n                            <td className=\"pl-3 pt-2 pb-2\"><button className=\"bg-slate-300 hover:bg-slate-400 rounded-full pt-2 pb-2 pl-5 pr-5\" onClick={clearFilter}>clear filter</button></td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {filter ? \r\n                        reports.filter(report => {\r\n                        const dateStr = report.FReport_time; // \"01. 02. 2023 14:03\"\r\n                        if (!dateStr) return false; // skip reports with empty FReport_time\r\n                        const day = dateStr.substring(0, 2);\r\n                        const month = dateStr.substring(4, 6);\r\n                        const year = dateStr.substring(8, 12);\r\n\r\n                        const isoDate = `${year}-${month}-${day}`; // \"2023-02-01\"\r\n                        const dateObj = new Date(isoDate);\r\n                        const filterDate = new Date(filter);\r\n                        return dateObj.toDateString() === filterDate.toDateString();\r\n                        }).map((report) => {\r\n                        return (\r\n                            <tr className={` border-b  hover:bg-slate-200`}>\r\n                                <td className=\"px-3 py-3\">{report.FReport_id}</td>\r\n                                <td className=\"px-3 py-3\">{report.FReport_time}</td>\r\n                                <td className=\"px-3 py-3\"><button className=\"bg-slate-300 hover:bg-slate-400 rounded-full pt-2 pb-2 pl-5 pr-5\" onClick={() => createExport(report.FReport_id)}>Export</button></td>\r\n                            </tr>\r\n                        )\r\n                        }) \r\n                        : reports.map((report) => {\r\n                        return (\r\n                            <tr className={` border-b  hover:bg-slate-200`}>\r\n                                <td className=\"px-3 py-3\">{report.FReport_id}</td>\r\n                                <td className=\"px-3 py-3\">{report.FReport_time}</td>\r\n                                <td className=\"px-3 py-3\"><button className=\"bg-slate-300 hover:bg-slate-400 rounded-full pt-2 pb-2 pl-5 pr-5\" onClick={() => createExport(report.FReport_id)}>Export</button></td>\r\n                            </tr>\r\n                        )\r\n                        })\r\n                    }\r\n                    {filter && \r\n                        !reports.some(report => {\r\n                        const dateStr = report.FReport_time; // \"01. 02. 2023 14:03\"\r\n                        if (!dateStr) return false; // skip reports with empty FReport_time\r\n                        const day = dateStr.substring(0, 2);\r\n                        const month = dateStr.substring(4, 6);\r\n                        const year = dateStr.substring(8, 12);\r\n\r\n                        const isoDate = `${year}-${month}-${day}`; // \"2023-02-01\"\r\n                        const dateObj = new Date(isoDate);\r\n                        const filterDate = new Date(filter);\r\n                        return dateObj.toDateString() === filterDate.toDateString();\r\n                        }) && \r\n                        <tr className={` border-b  hover:bg-slate-200`}>\r\n                                <td className=\"px-3 py-3 text-center\" colspan=\"3\">no data found</td>\r\n                            </tr>\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n\r\nexport default Reports;","C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\routes\\admin\\Config.jsx",["49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66"],[],"import { useEffect } from \"react\"\r\nimport {\r\n    QueryClient,\r\n    QueryClientProvider,\r\n    useQueryClient,\r\n    useQuery,\r\n    useMutation,\r\n  } from \"@tanstack/react-query\";\r\n\r\nimport { Navigate, useNavigate, useParams } from 'react-router-dom';\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\nasync function getOperations(IP, linkaId) {\r\n    let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\nasync function getProcesses(IP, linkaId) {\r\n    let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\nasync function getNameOfLine(IP, lineId) {\r\n    const response = await fetch(`http://${IP}:3005/getNameOfLine`, {\r\n        method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                PLine_id: lineId,\r\n            }),\r\n        });\r\n        return response.json();\r\n}\r\n\r\n\r\nconst IP = '172.23.30.216'\r\n\r\nfunction AddNewProcess({operationID, refetchProcesses}) {\r\n    const { status, error, mutate } = useMutation({\r\n        mutationFn: ({processName, operationID, processType}) => {\r\n          return fetch(`http://${IP}:3005/createNewProcess`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              Process_name: processName,\r\n              Operation_id: operationID,\r\n              Process_type: processType,\r\n            }),\r\n            \r\n          });\r\n          \r\n        },\r\n        onSuccess: () => {\r\n            Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Success\",\r\n            text: \"New process added successfully\",\r\n          });\r\n          refetchProcesses();\r\n        },\r\n        onError: () =>\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Error\",\r\n            text: \"Failed to add new process\",\r\n          }),\r\n      });\r\n\r\n     const addNewProcess = () => {\r\n       Swal.fire({\r\n         title: \"Add new process\",\r\n         html: `\r\n           <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n           <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n           <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n             <option value=\"btn\">Y/N button</option>\r\n             <option value=\"text\">Text</option>\r\n           </select>\r\n         `,\r\n         showCancelButton: true,\r\n         confirmButtonText: \"Confirm\",\r\n         cancelButtonText: \"Cancel\",\r\n         preConfirm: async () => {\r\n           let processName = document.getElementById(\"process-name\").value;\r\n           let processType = document.getElementById(\"process-type\").value;\r\n           mutate({processName, operationID, processType});\r\n         },\r\n       });\r\n     };\r\n     return (\r\n       <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={addNewProcess}>+Add new Process</button>\r\n     );\r\n    };\r\n\r\nfunction DeleteProcess({processID, refetchProcesses}){\r\n  const { status, error, mutate } = useMutation({\r\n    mutationFn: ({processID}) => {\r\n      return fetch(`http://${IP}:3005/deleteProcess`, {\r\n        method: 'DELETE',\r\n        body: JSON.stringify({Process_id: processID}),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    });   \r\n  },\r\n  onSuccess: () => {\r\n      Swal.fire({\r\n      icon: 'success',\r\n      title: 'Success',\r\n      text: 'Process deleted successfully'\r\n    });\r\n    refetchProcesses();\r\n  },\r\n  onError: () =>\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: 'Failed to delete process, something went wrong'\r\n    }),\r\n});\r\nconst deleteProcess = () => {\r\n  Swal.fire({\r\n    title: `Are you sure you want to delete process ID: ${processID}`,\r\n    text: \"\",\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    focusConfirm: false,\r\n    preConfirm: async () => {\r\n      mutate({processID});\r\n    },\r\n  });\r\n};\r\nreturn (\r\n  <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={deleteProcess}>Delete</button>\r\n);\r\n};\r\n\r\nfunction ChangeProcess({processID, processName, processType, refetchProcesses}){\r\n  const { status, error, mutate } = useMutation({\r\n    mutationFn: ({processID, updatedProcessName, updatedProcessType }) => {\r\n      return fetch(`http://${IP}:3005/changeProcess`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify({Process_id: processID, Process_name: updatedProcessName, Process_type: updatedProcessType}),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n  },\r\n  onSuccess: () => {\r\n    Swal.fire({\r\n      icon: 'success',\r\n      title: 'Success',\r\n      text: 'Process changed successfully'\r\n    });\r\n    refetchProcesses();\r\n  },\r\n  onError: () =>\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: 'Failed to change process, something went wrong'\r\n    })\r\n  });\r\nconst changeProcess = () => {\r\n    Swal.fire({\r\n      title: 'Change process',\r\n      html: `\r\n          <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\r\n          <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n          <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n            <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\r\n            <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\r\n          </select>\r\n      `,\r\n      showCancelButton: true,\r\n      confirmButtonText: 'Confirm',\r\n      cancelButtonText: 'Cancel',\r\n      preConfirm: async () => {\r\n        let updatedProcessName = document.getElementById('process-name').value;\r\n        let updatedProcessType = document.getElementById('process-type').value;\r\n        mutate({processID, updatedProcessName, updatedProcessType});\r\n    },\r\n  });}\r\nreturn (\r\n  <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => changeProcess(processID, processName, processType)}>Change</button>\r\n);\r\n};\r\nfunction AddNewOperation({linkaId, refetchOperations}){\r\n  const { status, error, mutate } = useMutation({\r\n    mutationFn: ({linkaId, newOperationName}) => {\r\n      return fetch(`http://${IP}:3005/createNewOperation`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({LinkaId: linkaId, Operation_name: newOperationName, }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      \r\n    },\r\n    onSuccess: () => {\r\n      Swal.fire({\r\n        icon: 'success',\r\n        title: 'Success',\r\n        text: 'New Operation added successfully'\r\n      });\r\n      refetchOperations();\r\n    },\r\n    onError: () =>\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: 'Failed to add new Operation, something went wrong'\r\n    })\r\n  });\r\n\r\n const addNewProcess = () => {\r\n  Swal.fire({\r\n    title: 'Add new Operation',\r\n    html: `\r\n      <textarea id=\"operation-name\" class=\"swal2-textarea\" placeholder=\"Operation name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n    `,\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Confirm',\r\n    cancelButtonText: 'Cancel',\r\n    preConfirm: async () => {\r\n      let newOperationName = document.getElementById('operation-name').value;\r\n       \r\n       mutate({linkaId, newOperationName});\r\n     },\r\n   });\r\n };\r\n return (\r\n   <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={addNewProcess}>+Add new Process</button>\r\n );\r\n};\r\n\r\nfunction DeleteOperation({operationId ,refetchOperations}){\r\n  const { status, error, mutate } = useMutation({\r\n    mutationFn: ({operationId}) => {\r\n      return fetch(`http://${IP}:3005/deleteOperation`, {\r\n        method: 'DELETE',\r\n        body: JSON.stringify({Operation_id: operationId}),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    });\r\n  },\r\n  onSuccess: () => {\r\n    Swal.fire({\r\n      icon: 'success',\r\n      title: 'Success',\r\n      text: 'Operation deleted successfully'\r\n  });\r\n    refetchOperations();\r\n  },\r\n  onError: () =>\r\n  Swal.fire({\r\n    icon: 'error',\r\n    title: 'Error',\r\n    text: 'Failed to delete operation, something went wrong'\r\n  }),\r\n});\r\nconst deleteProcess = () => {\r\n  Swal.fire({\r\n    title: `Are you sure you want to delete operation ID: ${operationId}`,\r\n    text: \"\",\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    focusConfirm: false,\r\n    preConfirm: async () => {\r\n      mutate({operationId});\r\n    },\r\n  });\r\n};\r\n\r\n\r\nreturn (\r\n  <button className=\"ml-5 mt-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={deleteProcess}>Delete Operation</button>\r\n\r\n)};\r\n\r\n\r\n\r\nfunction AdminConfig() {\r\n\r\n\r\n    const { lineId } = useParams();\r\n    const {status: operationsStatus, data: operations, refetch: refetchOperations} = useQuery({queryKey: ['operations'], queryFn: async () => await getOperations(IP, lineId), initialData: []});\r\n    const {status: processesStatus, data: processes, refetch: refetchProcesses} = useQuery({queryKey: ['processes'], queryFn: async () => await getProcesses(IP, lineId), initialData: []});\r\n    const {status: lineNameStatus, data: lineName} = useQuery({queryKey: ['lineName'], queryFn: async () => await getNameOfLine(IP, lineId), initialData: []});\r\n\r\n   \r\n        \r\n\r\n\r\n\r\n        \r\nif (operationsStatus === 'loading') {\r\n    return <span>Loading...lineNameLoad</span>\r\n\r\n} else if (processesStatus === 'loading') {\r\n    return <span>Loading...processesLoad</span>\r\n\r\n} else if (lineNameStatus === 'loading') {\r\n    return <span>Loading...operationsLoad</span>\r\n}\r\n\r\n    return (        \r\n        <div className=\"bg-slate-300 w-11/12 h-full flex flex-col\">\r\n            <div>\r\n                {console.log(processes)}\r\n                <h1 className=\"text-3xl pt-10 pb-10 text-center\">{lineName.length > 0 ? lineName[0].PLine_name : 'N/A'}</h1>\r\n            </div>\r\n            {operations.map((operation) => {\r\n                return (\r\n                    <div className=\"bg-white flex flex-col border\">\r\n                        <div className=\"flex frex-row mb-5 mt-5 items-center\">\r\n                            <div className=\"bg-white\">\r\n                                <p className=\"bg-slate-200 text-xl p-2 ml-4\">{operation.Operation_name}</p>\r\n                                <DeleteOperation operationId={operation.Operation_id} refetchOperations={refetchOperations} />\r\n                            </div>\r\n                            <div className=\"ml-5 rounded-3xl p-3 border\">\r\n                                {processes.map((processGroup) => {\r\n                                const filteredProcesses = processGroup.filter((process) => process.Operation_id_Operation === operation.Operation_id);\r\n                                return filteredProcesses.map((process) => {\r\n                                    return (\r\n                                    <div className=\"w-full p-2\">\r\n                                        <a className=\"bg-white text underline underline-offset-4\" id={process.Process_id}>{process.Process_name}</a>\r\n                                        <a className=\"ml-5\">{process.Process_type}</a>\r\n                                        <ChangeProcess processID={process.Process_id} processName={process.Process_name} processType={process.Process_type} refetchProcesses={refetchProcesses} />\r\n                                        <DeleteProcess processID={process.Process_id} refetchProcesses={refetchProcesses} />\r\n                                    </div>\r\n                                    );\r\n                                });\r\n                                })}\r\n                                <AddNewProcess operationID={operation.Operation_id} refetchProcesses={refetchProcesses} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n                })}\r\n            <div className=\"pt-5 pl-5 pb-5 border\">\r\n                <AddNewOperation linkaId={lineId} refetchOperations={refetchOperations}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminConfig;","C:\\Users\\hujerp\\OneDrive - Webasto Group\\Dokumenty\\GitHub\\project_holec\\frontend\\src\\routes\\home\\Linka.jsx",["67","68","69","70"],[],"import React, { useState ,useEffect } from \"react\";\r\nimport _ from 'lodash';\r\nimport Swal from 'sweetalert2'\r\n\r\nfunction Linka(props) {\r\n    const linkaId = props.linkaId\r\n    const goToHome = props.goToHome\r\n    const apiIP = props.apiIP\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [typyLinek, setTypyLinek] = useState([]);\r\n    const [selected, setSelected] = useState({});\r\n    const isAllSelected = Object.values(selected).every((value) => value !== \"None\" && value !== \"\");\r\n    \r\n\r\n\r\n\r\n    async function getTypyLinek() {\r\n        try {\r\n            const response = await fetch('http://'+apiIP+':3005/getTemplateAboutLinka', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    PLine_id: linkaId,\r\n                }),\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch data, status code: ${response.status}`);\r\n            }\r\n    \r\n            const data = await response.json();\r\n            setTypyLinek(data);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setLoading(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getTypyLinek();\r\n    },[]);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(selected)\r\n    },[selected])\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            const initialSelected = {};\r\n            typyLinek.forEach(({ Process_id }) => {\r\n                initialSelected[Process_id] = \"None\";\r\n            });\r\n            setSelected(initialSelected);\r\n        }\r\n    }, [loading, typyLinek, setSelected]);\r\n\r\n    const groupedData = _.groupBy(typyLinek, 'Operation_id');\r\n    const operationIds = Object.keys(groupedData);\r\n\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const operationsPerPage = 1;\r\n    \r\n    const numberOfPages = operationIds.length;\r\n    const indexOfLastOperation = currentPage * operationsPerPage;\r\n    const indexOfFirstOperation = indexOfLastOperation - operationsPerPage;\r\n    const currentOperations = operationIds.slice(indexOfFirstOperation, indexOfLastOperation);\r\n \r\n    \r\n    const handlePageChange = (newPage) => {\r\n        setCurrentPage(newPage);\r\n    };\r\n\r\n    const handleButtonClick = (processData, type) => {\r\n        setSelected( prevSelected => ({\r\n            ...prevSelected, [processData.Process_id]: type }));\r\n      };\r\n\r\n      const handleTextChange = (processData, type) => {\r\n        setSelected({ ...selected, [processData.Process_id]: type });\r\n      };\r\n\r\n\r\n    const sendData = () => {\r\n        Swal.fire({\r\n            title: 'Sending Data',\r\n            icon: 'info',\r\n            text: 'Please wait...',\r\n            showConfirmButton: false,\r\n            allowOutsideClick: false\r\n          });\r\n        const actualTime = new Date();\r\n        const options = { timeZone: 'Europe/Prague', hour12: false, year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };\r\n        const pragueTime = actualTime.toLocaleString('cs-CZ', options);\r\n        const userName = \"test\";\r\n\r\n        const selectedArray = Object.entries(selected).map(([process_id, process_data]) => ({\r\n            process_id: process_id,\r\n            process_data,\r\n            }));\r\n\r\n        const finalData = selectedArray.map((selectedItem) => {\r\n            const selectedProcess = typyLinek.find(\r\n                (typLinekItem) => typLinekItem.Process_id === selectedItem.process_id\r\n            ) || {};\r\n            console.log(selectedItem.process_id)\r\n            return {\r\n                \r\n                \"report_time\": pragueTime,\r\n                \"report_user\": userName,\r\n                \"report_linka\": typyLinek[0].PLine_name,\r\n                \"report_operation\": selectedProcess.Operation_name,\r\n                \"report_process\": selectedProcess.Process_name,\r\n                \"report_data\": selectedItem.process_data\r\n            };\r\n        });\r\n        console.log(finalData)\r\n        fetch('http://'+apiIP+':3005/insertFinalData', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(finalData)\r\n          })\r\n            .then(res => {\r\n              if (res.status === 200) {\r\n                Swal.fire({\r\n                  title: 'Data Sent Successfully!',\r\n                  icon: 'success',\r\n                  confirmButtonText: 'OK',\r\n                  showConfirmButton: true,\r\n                }).then(function() {\r\n                    goToHome();\r\n                  });\r\n              } else if (res.status === 400) {\r\n                Swal.fire({\r\n                  title: 'Error Sending Data',\r\n                  icon: 'error',\r\n                  confirmButtonText: 'Close'\r\n                });\r\n              } else if (res.status === 404) {\r\n                Swal.fire({\r\n                  title: 'Error Sending Data',\r\n                  icon: 'error',\r\n                  confirmButtonText: 'Close'\r\n                });\r\n        }});\r\n        };\r\n        \r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n      }\r\n    return (\r\n        \r\n        <div className=\"flex flex-col items-center h-screen\">\r\n            <div className='w-screen bg-gradient-to-r from-gray-700 to-gray-500 pt-14 pb-10 flex flex-row justify-center'>\r\n                <div className=\"flex justify-center align-middle\">\r\n                    <button className=\"rounded-full bg-black text-white mr-40 pt-3 pb-3 pl-3 pr-3\" onClick={goToHome}> Home btn</button>\r\n                    <h1 className=\"font-serif text-3xl\">{typyLinek[0].PLine_name}</h1>\r\n                    {isAllSelected && (\r\n                    <button className=\"bg-white border border-black ml-40 py-2 px-4 rounded-full\"\r\n                    onClick={() => sendData()}>\r\n                    Send\r\n                    </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <div className=\"flex mt-10 mb-10\">\r\n                <button\r\n                    className=\"bg-white border border-black py-2 px-4 rounded-lg\"\r\n                    disabled={currentPage === 1}\r\n                    onClick={() => handlePageChange(currentPage - 1)}\r\n                    >\r\n                    Prev\r\n                </button>\r\n                <a className=\"py-2 px-4\">{currentPage}/{numberOfPages}</a>\r\n                <button\r\n                    className=\"bg-white border border-black py-2 px-4 rounded-lg\"\r\n                    disabled={currentPage === operationIds.length}\r\n                    onClick={() => handlePageChange(currentPage + 1)}\r\n                    >\r\n                    Next\r\n                </button>\r\n            </div>\r\n            <div className=\"flex flex-row justify-start w-11/12 h-full mb-24\">\r\n                <div className=\"flex bg-green-200 text-3xl w-1/6 items-center justify-center mr-5 rounded-lg\">\r\n                    {groupedData[operationIds[currentPage - 1]][0].Operation_name}\r\n                </div>\r\n                <div className=\"flex flex-col h-full justify-center w-full\">\r\n                    {groupedData[operationIds[currentPage - 1]].map(processData => {\r\n                        return (\r\n                            <div className=\"flex flex-row\">\r\n                                <div className=\"border mt-2 mb-2 w-full bg-slate-200\" id={processData.Process_id}>\r\n                                    <div className=\"flex justify-between w-full\">\r\n                                        <a className=\"w-3/4\">{processData.Process_name}</a>\r\n                                        {processData.Process_type === 'btn' ? (\r\n                                            <div className=\"flex mr-5\">\r\n                                            \r\n                                                \r\n                                                <button className={`border border-black py-2 px-4 rounded-lg ${\r\n                                                    selected[processData.Process_id] === \"Y\" ? \"bg-green-500\" : \"bg-white\"\r\n                                                }`}\r\n                                                onClick={() => handleButtonClick(processData, \"Y\")}\r\n                                                >\r\n                                                Y\r\n                                                </button>\r\n                                                <button className={`border border-black py-2 px-4 rounded-lg ml-5 ${\r\n                                                    selected[processData.Process_id] === \"N\" ? \"bg-red-500\" : \"bg-white\"\r\n                                                }`}\r\n                                                onClick={() => handleButtonClick(processData, \"N\")}\r\n                                                >\r\n                                                N\r\n                                                </button>\r\n                                            </div>\r\n                                        ) : (\r\n                                        <div className=\"flex mr-5\">\r\n                                            <textarea \r\n                                                className={`border border-black py-2 px-4 rounded-lg w-full ${\r\n                                                    selected[processData.Process_id] === \"None\" || selected[processData.Process_id] === \"\" \r\n                                                    ? \"bg-red-500\" : \"bg-green-500\"\r\n                                                }`}\r\n                                                value={selected[processData.Process_id] === \"None\" ? \"\" : selected[processData.Process_id]}\r\n                                                onChange={(e) => handleTextChange(processData, e.target.value)}\r\n                                                name=\"textarea\"\r\n                                                />\r\n                                        </div>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Linka;\r\n\r\n",[],{"ruleId":null,"fatal":true,"severity":2,"message":"71","line":21,"column":2},{"ruleId":"72","severity":1,"message":"73","line":1,"column":27,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"72","severity":1,"message":"76","line":2,"column":8,"nodeType":"74","messageId":"75","endLine":2,"endColumn":9},{"ruleId":"72","severity":1,"message":"77","line":33,"column":21,"nodeType":"74","messageId":"75","endLine":33,"endColumn":32},{"ruleId":"72","severity":1,"message":"73","line":1,"column":10,"nodeType":"74","messageId":"75","endLine":1,"endColumn":19},{"ruleId":"72","severity":1,"message":"78","line":9,"column":10,"nodeType":"74","messageId":"75","endLine":9,"endColumn":25},{"ruleId":"72","severity":1,"message":"79","line":22,"column":13,"nodeType":"74","messageId":"75","endLine":22,"endColumn":19},{"ruleId":"72","severity":1,"message":"80","line":22,"column":21,"nodeType":"74","messageId":"75","endLine":22,"endColumn":26},{"ruleId":"81","severity":1,"message":"82","line":112,"column":17,"nodeType":"83","endLine":112,"endColumn":20},{"ruleId":"72","severity":1,"message":"84","line":2,"column":5,"nodeType":"74","messageId":"75","endLine":2,"endColumn":16},{"ruleId":"72","severity":1,"message":"85","line":3,"column":5,"nodeType":"74","messageId":"75","endLine":3,"endColumn":24},{"ruleId":"72","severity":1,"message":"73","line":1,"column":10,"nodeType":"74","messageId":"75","endLine":1,"endColumn":19},{"ruleId":"72","severity":1,"message":"84","line":3,"column":5,"nodeType":"74","messageId":"75","endLine":3,"endColumn":16},{"ruleId":"72","severity":1,"message":"85","line":4,"column":5,"nodeType":"74","messageId":"75","endLine":4,"endColumn":24},{"ruleId":"72","severity":1,"message":"86","line":5,"column":5,"nodeType":"74","messageId":"75","endLine":5,"endColumn":19},{"ruleId":"72","severity":1,"message":"87","line":10,"column":10,"nodeType":"74","messageId":"75","endLine":10,"endColumn":18},{"ruleId":"72","severity":1,"message":"88","line":10,"column":20,"nodeType":"74","messageId":"75","endLine":10,"endColumn":31},{"ruleId":"72","severity":1,"message":"79","line":55,"column":13,"nodeType":"74","messageId":"75","endLine":55,"endColumn":19},{"ruleId":"72","severity":1,"message":"80","line":55,"column":21,"nodeType":"74","messageId":"75","endLine":55,"endColumn":26},{"ruleId":"72","severity":1,"message":"79","line":114,"column":11,"nodeType":"74","messageId":"75","endLine":114,"endColumn":17},{"ruleId":"72","severity":1,"message":"80","line":114,"column":19,"nodeType":"74","messageId":"75","endLine":114,"endColumn":24},{"ruleId":"72","severity":1,"message":"79","line":158,"column":11,"nodeType":"74","messageId":"75","endLine":158,"endColumn":17},{"ruleId":"72","severity":1,"message":"80","line":158,"column":19,"nodeType":"74","messageId":"75","endLine":158,"endColumn":24},{"ruleId":"72","severity":1,"message":"79","line":208,"column":11,"nodeType":"74","messageId":"75","endLine":208,"endColumn":17},{"ruleId":"72","severity":1,"message":"80","line":208,"column":19,"nodeType":"74","messageId":"75","endLine":208,"endColumn":24},{"ruleId":"72","severity":1,"message":"79","line":257,"column":11,"nodeType":"74","messageId":"75","endLine":257,"endColumn":17},{"ruleId":"72","severity":1,"message":"80","line":257,"column":19,"nodeType":"74","messageId":"75","endLine":257,"endColumn":24},{"ruleId":"81","severity":1,"message":"82","line":348,"column":41,"nodeType":"83","endLine":348,"endColumn":123},{"ruleId":"81","severity":1,"message":"82","line":349,"column":41,"nodeType":"83","endLine":349,"endColumn":61},{"ruleId":"89","severity":1,"message":"90","line":44,"column":7,"nodeType":"91","endLine":44,"endColumn":9,"suggestions":"92"},{"ruleId":"72","severity":1,"message":"93","line":71,"column":11,"nodeType":"74","messageId":"75","endLine":71,"endColumn":28},{"ruleId":"81","severity":1,"message":"82","line":188,"column":17,"nodeType":"83","endLine":188,"endColumn":42},{"ruleId":"81","severity":1,"message":"82","line":207,"column":41,"nodeType":"83","endLine":207,"endColumn":62},"Parsing error: Identifier 'useQuery' has already been declared. (21:2)","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'_' is defined but never used.","'reportsLoad' is assigned a value but never used.","'useSearchParams' is defined but never used.","'status' is assigned a value but never used.","'error' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'QueryClient' is defined but never used.","'QueryClientProvider' is defined but never used.","'useQueryClient' is defined but never used.","'Navigate' is defined but never used.","'useNavigate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTypyLinek'. Either include it or remove the dependency array.","ArrayExpression",["94"],"'currentOperations' is assigned a value but never used.",{"desc":"95","fix":"96"},"Update the dependencies array to be: [getTypyLinek]",{"range":"97","text":"98"},[1342,1344],"[getTypyLinek]"]