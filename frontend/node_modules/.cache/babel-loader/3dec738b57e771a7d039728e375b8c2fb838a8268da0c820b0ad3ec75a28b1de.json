{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hujerp\\\\OneDrive - Webasto Group\\\\Dokumenty\\\\GitHub\\\\project_holec\\\\frontend\\\\src\\\\routes\\\\admin\\\\Config.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { QueryClient, QueryClientProvider, useQueryClient, useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Navigate, useNavigate, useParams } from 'react-router-dom';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function getOperations(IP, linkaId) {\n  let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: linkaId\n    })\n  });\n  return response.json();\n}\nasync function getProcesses(IP, linkaId) {\n  let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: linkaId\n    })\n  });\n  return response.json();\n}\nasync function getNameOfLine(IP, lineId) {\n  const response = await fetch(`http://${IP}:3005/getNameOfLine`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: lineId\n    })\n  });\n  return response.json();\n}\nconst IP = '10.10.195.44';\nfunction AddNewProcess(_ref) {\n  _s();\n  let {\n    operationID,\n    refetchProcesses\n  } = _ref;\n  const {\n    status,\n    error,\n    mutate\n  } = useMutation({\n    mutationFn: _ref2 => {\n      let {\n        processName,\n        operationID,\n        processType\n      } = _ref2;\n      return fetch(`http://${IP}:3005/createNewProcess`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          Process_name: processName,\n          Operation_id: operationID,\n          Process_type: processType\n        })\n      });\n    },\n    onSuccess: () => {\n      Swal.fire({\n        icon: \"success\",\n        title: \"Success\",\n        text: \"New process added successfully\"\n      });\n      refetchProcesses();\n    },\n    onError: () => Swal.fire({\n      icon: \"error\",\n      title: \"Error\",\n      text: \"Failed to add new process\"\n    })\n  });\n  const addNewProcess = () => {\n    Swal.fire({\n      title: \"Add new process\",\n      html: `\n           <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\n           <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\n           <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\n             <option value=\"btn\">Y/N button</option>\n             <option value=\"text\">Text</option>\n           </select>\n         `,\n      showCancelButton: true,\n      confirmButtonText: \"Confirm\",\n      cancelButtonText: \"Cancel\",\n      preConfirm: async () => {\n        let processName = document.getElementById(\"process-name\").value;\n        let processType = document.getElementById(\"process-type\").value;\n        mutate({\n          processName,\n          operationID,\n          processType\n        });\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n    onClick: addNewProcess,\n    children: \"+Add new Process\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 8\n  }, this);\n}\n_s(AddNewProcess, \"1GludqV8W+iwTdMnRVkkPhETNY0=\", false, function () {\n  return [useMutation];\n});\n_c = AddNewProcess;\n;\nfunction DeleteProcess(_ref3) {\n  _s2();\n  let {\n    processID,\n    refetchProcesses\n  } = _ref3;\n  const {\n    status,\n    error,\n    mutate\n  } = useMutation({\n    mutationFn: _ref4 => {\n      let {\n        processID\n      } = _ref4;\n      return fetch(`http://${IP}:3005/deleteProcess`, {\n        method: 'DELETE',\n        body: JSON.stringify({\n          Process_id: processID\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    },\n    onSuccess: () => {\n      Swal.fire({\n        icon: 'success',\n        title: 'Success',\n        text: 'Process deleted successfully'\n      });\n      refetchProcesses();\n    },\n    onError: () => Swal.fire({\n      icon: 'error',\n      title: 'Error',\n      text: 'Failed to delete process, something went wrong'\n    })\n  });\n  const deleteProcess = () => {\n    Swal.fire({\n      title: `Are you sure you want to delete process ID: ${processID}`,\n      text: \"\",\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'Cancel',\n      focusConfirm: false,\n      preConfirm: async () => {\n        mutate({\n          processID\n        });\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n    onClick: deleteProcess,\n    children: \"Delete\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 3\n  }, this);\n}\n_s2(DeleteProcess, \"1GludqV8W+iwTdMnRVkkPhETNY0=\", false, function () {\n  return [useMutation];\n});\n_c2 = DeleteProcess;\n;\nfunction ChangeProcess(_ref5) {\n  _s3();\n  let {\n    processID,\n    processName,\n    processType,\n    refetchProcesses\n  } = _ref5;\n  const {\n    status,\n    error,\n    mutate\n  } = useMutation({\n    mutationFn: _ref6 => {\n      let {\n        processID,\n        updatedProcessName,\n        updatedProcessType\n      } = _ref6;\n      return fetch(`http://${IP}:3005/changeProcess`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          Process_id: processID,\n          Process_name: updatedProcessName,\n          Process_type: updatedProcessType\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    },\n    onSuccess: () => {\n      Swal.fire({\n        icon: 'success',\n        title: 'Success',\n        text: 'Process changed successfully'\n      });\n      refetchProcesses();\n    },\n    onError: () => Swal.fire({\n      icon: 'error',\n      title: 'Error',\n      text: 'Failed to change process, something went wrong'\n    })\n  });\n  const changeProcess = () => {\n    Swal.fire({\n      title: 'Change process',\n      html: `\n          <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\n          <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\n          <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\n            <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\n            <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\n          </select>\n      `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm',\n      cancelButtonText: 'Cancel',\n      preConfirm: async () => {\n        let updatedProcessName = document.getElementById('process-name').value;\n        let updatedProcessType = document.getElementById('process-type').value;\n        mutate({\n          processID,\n          updatedProcessName,\n          updatedProcessType\n        });\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n    onClick: () => changeProcess(processID, processName, processType),\n    children: \"Change\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 3\n  }, this);\n}\n_s3(ChangeProcess, \"1GludqV8W+iwTdMnRVkkPhETNY0=\", false, function () {\n  return [useMutation];\n});\n_c3 = ChangeProcess;\nfunction AdminConfig() {\n  _s4();\n  const {\n    lineId\n  } = useParams();\n  const {\n    status: operationsStatus,\n    data: operations\n  } = useQuery({\n    queryKey: ['operations'],\n    queryFn: async () => await getOperations(IP, lineId),\n    initialData: []\n  });\n  const {\n    status: processesStatus,\n    data: processes,\n    refetch: refetchProcesses\n  } = useQuery({\n    queryKey: ['processes'],\n    queryFn: async () => await getProcesses(IP, lineId),\n    initialData: []\n  });\n  const {\n    status: lineNameStatus,\n    data: lineName\n  } = useQuery({\n    queryKey: ['lineName'],\n    queryFn: async () => await getNameOfLine(IP, lineId),\n    initialData: []\n  });\n  const changeProcess = (processID, processName, processType) => {\n    Swal.fire({\n      title: 'Change process',\n      html: `\n                        <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\n                        <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\n                        <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\n                          <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\n                          <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\n                        </select>\n                    `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm',\n      cancelButtonText: 'Cancel',\n      preConfirm: async () => {\n        let updatedProcessName = document.getElementById('process-name').value;\n        let updatedProcessType = document.getElementById('process-type').value;\n        try {\n          let response = await fetch(`http://${IP}:3005/changeProcess`, {\n            method: 'PUT',\n            body: JSON.stringify({\n              Process_id: processID,\n              Process_name: updatedProcessName,\n              Process_type: updatedProcessType\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if (response.status === 200) {\n            Swal.fire({\n              icon: 'success',\n              title: 'Success',\n              text: 'Process changed successfully'\n            });\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: 'Failed to change process, communication error'\n            });\n          }\n        } catch (error) {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to change process, something went wrong'\n          });\n        }\n      }\n    });\n  };\n  const createNewOperation = linkaId => {\n    Swal.fire({\n      title: 'Add new Operation',\n      html: `\n                <textarea id=\"operation-name\" class=\"swal2-textarea\" placeholder=\"Operation name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\n              `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm',\n      cancelButtonText: 'Cancel',\n      preConfirm: async () => {\n        let newOperationName = document.getElementById('operation-name').value;\n        try {\n          let response = await fetch(`http://${IP}:3005/createNewOperation`, {\n            method: 'POST',\n            body: JSON.stringify({\n              LinkaId: linkaId,\n              Operation_name: newOperationName\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if (response.status === 200) {\n            Swal.fire({\n              icon: 'success',\n              title: 'Success',\n              text: 'New Operation added successfully'\n            });\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: 'Failed to add new Operation, communication error'\n            });\n          }\n        } catch (error) {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to add new Operation, something went wrong'\n          });\n        }\n      }\n    });\n  };\n  const deleteOperation = operationId => {\n    Swal.fire({\n      title: `Are you sure you want to delete operation ID: ${operationId}`,\n      text: \"\",\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'Cancel',\n      focusConfirm: false,\n      preConfirm: async () => {\n        // Call the API endpoint here\n        let response = await fetch(`http://${IP}:3005/deleteOperation`, {\n          method: 'DELETE',\n          body: JSON.stringify({\n            Operation_id: operationId\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Check the status of the response\n        if (response.status === 200) {\n          Swal.fire({\n            icon: 'success',\n            title: 'Success',\n            text: 'Operation deleted successfully'\n          });\n        } else {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to delete operation, something went wrong'\n          });\n        }\n      }\n    });\n  };\n  if (operationsStatus === 'loading') {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading...lineNameLoad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 12\n    }, this);\n  } else if (processesStatus === 'loading') {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading...processesLoad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 12\n    }, this);\n  } else if (lineNameStatus === 'loading') {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading...operationsLoad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-slate-300 w-11/12 h-full flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [console.log(processes), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl pt-10 pb-10 text-center\",\n        children: lineName.length > 0 ? lineName[0].PLine_name : 'N/A'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }, this), operations.map(operation => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white flex flex-col border\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex frex-row mb-5 mt-5 items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"bg-slate-200 text-xl p-2 ml-4\",\n              children: operation.Operation_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"ml-5 mt-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n              onClick: () => deleteOperation(operation.Operation_id),\n              children: \"Delete Operation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ml-5 rounded-3xl p-3 border\",\n            children: [processes.map(processGroup => {\n              const filteredProcesses = processGroup.filter(process => process.Operation_id_Operation === operation.Operation_id);\n              return filteredProcesses.map(process => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"w-full p-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                    className: \"bg-white text underline underline-offset-4\",\n                    id: process.Process_id,\n                    children: process.Process_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 381,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                    className: \"ml-5\",\n                    children: process.Process_type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 382,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(ChangeProcess, {\n                    processID: process.Process_id,\n                    processName: process.Process_name,\n                    processType: process.Process_type,\n                    refetchProcesses: refetchProcesses\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 383,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(DeleteProcess, {\n                    processID: process.Process_id,\n                    refetchProcesses: refetchProcesses\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 384,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 37\n                }, this);\n              });\n            }), /*#__PURE__*/_jsxDEV(AddNewProcess, {\n              operationID: operation.Operation_id,\n              refetchProcesses: refetchProcesses\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 21\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-5 pl-5 pb-5 border\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n        onClick: () => createNewOperation(lineId),\n        children: \"+Add new Operation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 9\n  }, this);\n}\n_s4(AdminConfig, \"EmRYtV2sXxK+eyzuse+8SidglLM=\", false, function () {\n  return [useParams, useQuery, useQuery, useQuery];\n});\n_c4 = AdminConfig;\nexport default AdminConfig;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"AddNewProcess\");\n$RefreshReg$(_c2, \"DeleteProcess\");\n$RefreshReg$(_c3, \"ChangeProcess\");\n$RefreshReg$(_c4, \"AdminConfig\");","map":{"version":3,"names":["useEffect","QueryClient","QueryClientProvider","useQueryClient","useQuery","useMutation","Navigate","useNavigate","useParams","Swal","getOperations","IP","linkaId","response","fetch","method","headers","body","JSON","stringify","PLine_id","json","getProcesses","getNameOfLine","lineId","AddNewProcess","operationID","refetchProcesses","status","error","mutate","mutationFn","processName","processType","Process_name","Operation_id","Process_type","onSuccess","fire","icon","title","text","onError","addNewProcess","html","showCancelButton","confirmButtonText","cancelButtonText","preConfirm","document","getElementById","value","DeleteProcess","processID","Process_id","deleteProcess","focusConfirm","ChangeProcess","updatedProcessName","updatedProcessType","changeProcess","AdminConfig","operationsStatus","data","operations","queryKey","queryFn","initialData","processesStatus","processes","refetch","lineNameStatus","lineName","createNewOperation","newOperationName","LinkaId","Operation_name","deleteOperation","operationId","console","log","length","PLine_name","map","operation","processGroup","filteredProcesses","filter","process","Operation_id_Operation"],"sources":["C:/Users/hujerp/OneDrive - Webasto Group/Dokumenty/GitHub/project_holec/frontend/src/routes/admin/Config.jsx"],"sourcesContent":["import { useEffect } from \"react\"\r\nimport {\r\n    QueryClient,\r\n    QueryClientProvider,\r\n    useQueryClient,\r\n    useQuery,\r\n    useMutation,\r\n  } from \"@tanstack/react-query\";\r\n\r\nimport { Navigate, useNavigate, useParams } from 'react-router-dom';\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\nasync function getOperations(IP, linkaId) {\r\n    let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\nasync function getProcesses(IP, linkaId) {\r\n    let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\nasync function getNameOfLine(IP, lineId) {\r\n    const response = await fetch(`http://${IP}:3005/getNameOfLine`, {\r\n        method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                PLine_id: lineId,\r\n            }),\r\n        });\r\n        return response.json();\r\n}\r\n\r\n\r\nconst IP = '10.10.195.44'\r\n\r\nfunction AddNewProcess({operationID, refetchProcesses}) {\r\n    const { status, error, mutate } = useMutation({\r\n        mutationFn: ({processName, operationID, processType}) => {\r\n          return fetch(`http://${IP}:3005/createNewProcess`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              Process_name: processName,\r\n              Operation_id: operationID,\r\n              Process_type: processType,\r\n            }),\r\n            \r\n          });\r\n          \r\n        },\r\n        onSuccess: () => {\r\n            Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Success\",\r\n            text: \"New process added successfully\",\r\n          });\r\n          refetchProcesses();\r\n        },\r\n        onError: () =>\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Error\",\r\n            text: \"Failed to add new process\",\r\n          }),\r\n      });\r\n\r\n     const addNewProcess = () => {\r\n       Swal.fire({\r\n         title: \"Add new process\",\r\n         html: `\r\n           <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n           <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n           <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n             <option value=\"btn\">Y/N button</option>\r\n             <option value=\"text\">Text</option>\r\n           </select>\r\n         `,\r\n         showCancelButton: true,\r\n         confirmButtonText: \"Confirm\",\r\n         cancelButtonText: \"Cancel\",\r\n         preConfirm: async () => {\r\n           let processName = document.getElementById(\"process-name\").value;\r\n           let processType = document.getElementById(\"process-type\").value;\r\n           mutate({processName, operationID, processType});\r\n         },\r\n       });\r\n     };\r\n     return (\r\n       <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={addNewProcess}>+Add new Process</button>\r\n     );\r\n    };\r\n\r\nfunction DeleteProcess({processID, refetchProcesses}){\r\n  const { status, error, mutate } = useMutation({\r\n    mutationFn: ({processID}) => {\r\n      return fetch(`http://${IP}:3005/deleteProcess`, {\r\n        method: 'DELETE',\r\n        body: JSON.stringify({Process_id: processID}),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    });   \r\n  },\r\n  onSuccess: () => {\r\n      Swal.fire({\r\n      icon: 'success',\r\n      title: 'Success',\r\n      text: 'Process deleted successfully'\r\n    });\r\n    refetchProcesses();\r\n  },\r\n  onError: () =>\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: 'Failed to delete process, something went wrong'\r\n    }),\r\n});\r\nconst deleteProcess = () => {\r\n  Swal.fire({\r\n    title: `Are you sure you want to delete process ID: ${processID}`,\r\n    text: \"\",\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    focusConfirm: false,\r\n    preConfirm: async () => {\r\n      mutate({processID});\r\n    },\r\n  });\r\n};\r\nreturn (\r\n  <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={deleteProcess}>Delete</button>\r\n);\r\n};\r\n\r\nfunction ChangeProcess({processID, processName, processType, refetchProcesses}){\r\n  const { status, error, mutate } = useMutation({\r\n    mutationFn: ({processID, updatedProcessName, updatedProcessType }) => {\r\n      return fetch(`http://${IP}:3005/changeProcess`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify({Process_id: processID, Process_name: updatedProcessName, Process_type: updatedProcessType}),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n  },\r\n  onSuccess: () => {\r\n    Swal.fire({\r\n      icon: 'success',\r\n      title: 'Success',\r\n      text: 'Process changed successfully'\r\n    });\r\n    refetchProcesses();\r\n  },\r\n  onError: () =>\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: 'Failed to change process, something went wrong'\r\n    })\r\n  });\r\nconst changeProcess = () => {\r\n    Swal.fire({\r\n      title: 'Change process',\r\n      html: `\r\n          <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\r\n          <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n          <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n            <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\r\n            <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\r\n          </select>\r\n      `,\r\n      showCancelButton: true,\r\n      confirmButtonText: 'Confirm',\r\n      cancelButtonText: 'Cancel',\r\n      preConfirm: async () => {\r\n        let updatedProcessName = document.getElementById('process-name').value;\r\n        let updatedProcessType = document.getElementById('process-type').value;\r\n        mutate({processID, updatedProcessName, updatedProcessType});\r\n    },\r\n  });}\r\nreturn (\r\n  <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => changeProcess(processID, processName, processType)}>Change</button>\r\n);\r\n}\r\n\r\nfunction AdminConfig() {\r\n\r\n\r\n    const { lineId } = useParams();\r\n    const {status: operationsStatus, data: operations} = useQuery({queryKey: ['operations'], queryFn: async () => await getOperations(IP, lineId), initialData: []});\r\n    const {status: processesStatus, data: processes, refetch: refetchProcesses} = useQuery({queryKey: ['processes'], queryFn: async () => await getProcesses(IP, lineId), initialData: []});\r\n    const {status: lineNameStatus, data: lineName} = useQuery({queryKey: ['lineName'], queryFn: async () => await getNameOfLine(IP, lineId), initialData: []});\r\n\r\n   \r\n     \r\n            const changeProcess = (processID, processName, processType) => {\r\n                Swal.fire({\r\n                    title: 'Change process',\r\n                    html: `\r\n                        <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\r\n                        <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n                        <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n                          <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\r\n                          <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\r\n                        </select>\r\n                    `,\r\n                    showCancelButton: true,\r\n                    confirmButtonText: 'Confirm',\r\n                    cancelButtonText: 'Cancel',\r\n                    preConfirm: async () => {\r\n                        let updatedProcessName = document.getElementById('process-name').value;\r\n                        let updatedProcessType = document.getElementById('process-type').value;\r\n                        try {\r\n                            let response = await fetch(`http://${IP}:3005/changeProcess`, {\r\n                  method: 'PUT',\r\n                  body: JSON.stringify({Process_id: processID, Process_name: updatedProcessName, Process_type: updatedProcessType}),\r\n                  headers: {\r\n                    'Content-Type': 'application/json'\r\n                  }\r\n                });\r\n        \r\n                if (response.status === 200) {\r\n                  Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Success',\r\n                    text: 'Process changed successfully'\r\n                  });\r\n                } else {\r\n                  Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Failed to change process, communication error'\r\n                  });\r\n                }\r\n              } catch (error) {\r\n                Swal.fire({\r\n                  icon: 'error',\r\n                  title: 'Error',\r\n                  text: 'Failed to change process, something went wrong'\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n        \r\n        const createNewOperation = (linkaId) => {\r\n            Swal.fire({\r\n              title: 'Add new Operation',\r\n              html: `\r\n                <textarea id=\"operation-name\" class=\"swal2-textarea\" placeholder=\"Operation name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n              `,\r\n              showCancelButton: true,\r\n              confirmButtonText: 'Confirm',\r\n              cancelButtonText: 'Cancel',\r\n              preConfirm: async () => {\r\n                let newOperationName = document.getElementById('operation-name').value;\r\n                try {\r\n                  let response = await fetch(`http://${IP}:3005/createNewOperation`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({LinkaId: linkaId, Operation_name: newOperationName, }),\r\n                    headers: {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                  });\r\n          \r\n                  if (response.status === 200) {\r\n                    Swal.fire({\r\n                      icon: 'success',\r\n                      title: 'Success',\r\n                      text: 'New Operation added successfully'\r\n                    });\r\n                  } else {\r\n                    Swal.fire({\r\n                      icon: 'error',\r\n                      title: 'Error',\r\n                      text: 'Failed to add new Operation, communication error'\r\n                    });\r\n                  }\r\n                } catch (error) {\r\n                  Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Failed to add new Operation, something went wrong'\r\n                  });\r\n                }\r\n              }\r\n            });\r\n          }\r\n        \r\n          const deleteOperation = (operationId) => {\r\n            Swal.fire({\r\n                title: `Are you sure you want to delete operation ID: ${operationId}`,\r\n                text: \"\",\r\n                showCancelButton: true,\r\n                confirmButtonText: 'Yes',\r\n                cancelButtonText: 'Cancel',\r\n                focusConfirm: false,\r\n                preConfirm: async () => {\r\n                    // Call the API endpoint here\r\n                    let response = await fetch(`http://${IP}:3005/deleteOperation`, {\r\n                        method: 'DELETE',\r\n                        body: JSON.stringify({Operation_id: operationId}),\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    });\r\n        \r\n                    // Check the status of the response\r\n                    if (response.status === 200) {\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: 'Success',\r\n                            text: 'Operation deleted successfully'\r\n                        });\r\n                    } else {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Error',\r\n                            text: 'Failed to delete operation, something went wrong'\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n\r\n\r\n        \r\nif (operationsStatus === 'loading') {\r\n    return <span>Loading...lineNameLoad</span>\r\n\r\n} else if (processesStatus === 'loading') {\r\n    return <span>Loading...processesLoad</span>\r\n\r\n} else if (lineNameStatus === 'loading') {\r\n    return <span>Loading...operationsLoad</span>\r\n}\r\n\r\n    return (        \r\n        <div className=\"bg-slate-300 w-11/12 h-full flex flex-col\">\r\n            <div>\r\n                {console.log(processes)}\r\n                <h1 className=\"text-3xl pt-10 pb-10 text-center\">{lineName.length > 0 ? lineName[0].PLine_name : 'N/A'}</h1>\r\n            </div>\r\n            {operations.map((operation) => {\r\n                return (\r\n                    <div className=\"bg-white flex flex-col border\">\r\n                        <div className=\"flex frex-row mb-5 mt-5 items-center\">\r\n                            <div className=\"bg-white\">\r\n                                <p className=\"bg-slate-200 text-xl p-2 ml-4\">{operation.Operation_name}</p>\r\n                                <button className=\"ml-5 mt-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => deleteOperation(operation.Operation_id)}>Delete Operation</button>\r\n                            </div>\r\n                            <div className=\"ml-5 rounded-3xl p-3 border\">\r\n                                {processes.map((processGroup) => {\r\n                                const filteredProcesses = processGroup.filter((process) => process.Operation_id_Operation === operation.Operation_id);\r\n                                return filteredProcesses.map((process) => {\r\n                                    return (\r\n                                    <div className=\"w-full p-2\">\r\n                                        <a className=\"bg-white text underline underline-offset-4\" id={process.Process_id}>{process.Process_name}</a>\r\n                                        <a className=\"ml-5\">{process.Process_type}</a>\r\n                                        <ChangeProcess processID={process.Process_id} processName={process.Process_name} processType={process.Process_type} refetchProcesses={refetchProcesses} />\r\n                                        <DeleteProcess processID={process.Process_id} refetchProcesses={refetchProcesses} />\r\n                                    </div>\r\n                                    );\r\n                                });\r\n                                })}\r\n                                <AddNewProcess operationID={operation.Operation_id} refetchProcesses={refetchProcesses} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n                })}\r\n            <div className=\"pt-5 pl-5 pb-5 border\">\r\n                <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => createNewOperation(lineId)}>+Add new Operation</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminConfig;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}