{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hujerp\\\\OneDrive - Webasto Group\\\\Dokumenty\\\\GitHub\\\\project_holec\\\\frontend\\\\src\\\\routes\\\\admin\\\\Config.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { QueryClient, QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { useParams } from 'react-router-dom';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function getOperations(IP, linkaId) {\n  let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: linkaId\n    })\n  });\n  return response.json();\n}\nasync function getProcesses(IP, linkaId) {\n  let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: linkaId\n    })\n  });\n  return response.json();\n}\nasync function getNameOfLine(IP, lineId) {\n  const response = await fetch(`http://${IP}:3005/getNameOfLine`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: lineId\n    })\n  });\n  return response.json();\n}\nconst IP = '10.10.195.44';\nconst addNewProcess = operationID => {\n  Swal.fire({\n    title: 'Add new process',\n    html: `\n        <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\n        <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\n        <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\n          <option value=\"btn\">Y/N button</option>\n          <option value=\"text\">Text</option>\n        </select>\n      `,\n    showCancelButton: true,\n    confirmButtonText: 'Confirm',\n    cancelButtonText: 'Cancel',\n    preConfirm: async () => {\n      let processName = document.getElementById('process-name').value;\n      let processType = document.getElementById('process-type').value;\n      try {\n        let response = await fetch(`http://${IP}:3005/createNewProcess`, {\n          method: 'POST',\n          body: JSON.stringify({\n            Process_name: processName,\n            Operation_id: operationID,\n            Process_type: processType\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 200) {\n          setBtnClicked(true);\n          Swal.fire({\n            icon: 'success',\n            title: 'Success',\n            text: 'New process added successfully'\n          });\n        } else {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to add new process, communication error'\n          });\n        }\n      } catch (error) {\n        Swal.fire({\n          icon: 'error',\n          title: 'Error',\n          text: 'Failed to add new process, something went wrong'\n        });\n      }\n    }\n  });\n};\nconst deleteProcess = processID => {\n  Swal.fire({\n    title: `Are you sure you want to delete process ID: ${processID}`,\n    text: \"\",\n    showCancelButton: true,\n    confirmButtonText: 'Yes',\n    cancelButtonText: 'Cancel',\n    focusConfirm: false,\n    preConfirm: async () => {\n      // Call the API endpoint here\n      let response = await fetch(`http://${IP}:3005/deleteProcess`, {\n        method: 'DELETE',\n        body: JSON.stringify({\n          Process_id: processID\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Check the status of the response\n      if (response.status === 200) {\n        setBtnClicked(true);\n        Swal.fire({\n          icon: 'success',\n          title: 'Success',\n          text: 'Process deleted successfully'\n        });\n      } else {\n        Swal.fire({\n          icon: 'error',\n          title: 'Error',\n          text: 'Failed to delete process, something went wrong'\n        });\n      }\n    }\n  });\n};\nconst changeProcess = (processID, processName, processType) => {\n  Swal.fire({\n    title: 'Change process',\n    html: `\n            <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\n            <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\n            <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\n              <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\n              <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\n            </select>\n        `,\n    showCancelButton: true,\n    confirmButtonText: 'Confirm',\n    cancelButtonText: 'Cancel',\n    preConfirm: async () => {\n      let updatedProcessName = document.getElementById('process-name').value;\n      let updatedProcessType = document.getElementById('process-type').value;\n      try {\n        let response = await fetch(`http://${IP}:3005/changeProcess`, {\n          method: 'PUT',\n          body: JSON.stringify({\n            Process_id: processID,\n            Process_name: updatedProcessName,\n            Process_type: updatedProcessType\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 200) {\n          setBtnClicked(true);\n          Swal.fire({\n            icon: 'success',\n            title: 'Success',\n            text: 'Process changed successfully'\n          });\n        } else {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to change process, communication error'\n          });\n        }\n      } catch (error) {\n        Swal.fire({\n          icon: 'error',\n          title: 'Error',\n          text: 'Failed to change process, something went wrong'\n        });\n      }\n    }\n  });\n};\nconst createNewOperation = linkaId => {\n  Swal.fire({\n    title: 'Add new Operation',\n    html: `\n    <textarea id=\"operation-name\" class=\"swal2-textarea\" placeholder=\"Operation name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\n  `,\n    showCancelButton: true,\n    confirmButtonText: 'Confirm',\n    cancelButtonText: 'Cancel',\n    preConfirm: async () => {\n      let newOperationName = document.getElementById('operation-name').value;\n      try {\n        let response = await fetch(`http://${IP}:3005/createNewOperation`, {\n          method: 'POST',\n          body: JSON.stringify({\n            LinkaId: linkaId,\n            Operation_name: newOperationName\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 200) {\n          setBtnClicked(true);\n          Swal.fire({\n            icon: 'success',\n            title: 'Success',\n            text: 'New Operation added successfully'\n          });\n        } else {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to add new Operation, communication error'\n          });\n        }\n      } catch (error) {\n        Swal.fire({\n          icon: 'error',\n          title: 'Error',\n          text: 'Failed to add new Operation, something went wrong'\n        });\n      }\n    }\n  });\n};\nconst deleteOperation = operationId => {\n  Swal.fire({\n    title: `Are you sure you want to delete operation ID: ${operationId}`,\n    text: \"\",\n    showCancelButton: true,\n    confirmButtonText: 'Yes',\n    cancelButtonText: 'Cancel',\n    focusConfirm: false,\n    preConfirm: async () => {\n      // Call the API endpoint here\n      let response = await fetch(`http://${IP}:3005/deleteOperation`, {\n        method: 'DELETE',\n        body: JSON.stringify({\n          Operation_id: operationId\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Check the status of the response\n      if (response.status === 200) {\n        setBtnClicked(true);\n        Swal.fire({\n          icon: 'success',\n          title: 'Success',\n          text: 'Operation deleted successfully'\n        });\n      } else {\n        Swal.fire({\n          icon: 'error',\n          title: 'Error',\n          text: 'Failed to delete operation, something went wrong'\n        });\n      }\n    }\n  });\n};\nfunction AdminConfig() {\n  _s();\n  const {\n    lineId\n  } = useParams();\n  const {\n    isLoading: operationsLoad,\n    data: operations\n  } = useQuery({\n    queryKey: ['operations'],\n    queryFn: async () => await getOperations(IP, lineId),\n    initialData: []\n  });\n  const {\n    isLoading: processesLoad,\n    data: processes\n  } = useQuery({\n    queryKey: ['processes'],\n    queryFn: async () => await getProcesses(IP, lineId),\n    initialData: []\n  });\n  const {\n    isLoading: lineNameLoad,\n    data: lineName\n  } = useQuery({\n    queryKey: ['lineName'],\n    queryFn: async () => await getNameOfLine(IP, lineId),\n    initialData: []\n  });\n  const [btnclicked, setBtnClicked] = useState(false);\n  if (lineNameLoad) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-slate-300 w-11/12 h-full flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl pt-10 pb-10 text-center\",\n        children: lineName.length > 0 ? lineName[0].PLine_name : 'N/A'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this), operations.map(operation => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white flex flex-col border\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex frex-row mb-5 mt-5 items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"bg-slate-200 text-xl p-2 ml-4\",\n              children: operation.Operation_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"ml-5 mt-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n              onClick: () => deleteOperation(operation.Operation_id),\n              children: \"Delete Operation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ml-5 rounded-3xl p-3 border\",\n            children: [processes.map(processGroup => {\n              const filteredProcesses = processGroup.filter(process => process.Operation_id_Operation === operation.Operation_id);\n              return filteredProcesses.map(process => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"w-full p-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                    className: \"bg-white text underline underline-offset-4\",\n                    id: process.Process_id,\n                    children: process.Process_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                    className: \"ml-5\",\n                    children: process.Process_type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n                    onClick: () => changeProcess(process.Process_id, process.Process_name, process.Process_type),\n                    children: \"Change\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 313,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n                    onClick: () => deleteProcess(process.Process_id),\n                    children: \"Delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 37\n                }, this);\n              });\n            }), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n              onClick: () => addNewProcess(operation.Operation_id),\n              children: \"+ Add new Process\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 21\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-5 pl-5 pb-5 border\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n        onClick: () => createNewOperation(lineId),\n        children: \"+Add new Operation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminConfig, \"/1r5SDq9lTv8dstqSg626O1kgqo=\", false, function () {\n  return [useParams, useQuery, useQuery, useQuery];\n});\n_c = AdminConfig;\nexport default AdminConfig;\nvar _c;\n$RefreshReg$(_c, \"AdminConfig\");","map":{"version":3,"names":["useEffect","QueryClient","QueryClientProvider","useQuery","useParams","Swal","getOperations","IP","linkaId","response","fetch","method","headers","body","JSON","stringify","PLine_id","json","getProcesses","getNameOfLine","lineId","addNewProcess","operationID","fire","title","html","showCancelButton","confirmButtonText","cancelButtonText","preConfirm","processName","document","getElementById","value","processType","Process_name","Operation_id","Process_type","status","setBtnClicked","icon","text","error","deleteProcess","processID","focusConfirm","Process_id","changeProcess","updatedProcessName","updatedProcessType","createNewOperation","newOperationName","LinkaId","Operation_name","deleteOperation","operationId","AdminConfig","isLoading","operationsLoad","data","operations","queryKey","queryFn","initialData","processesLoad","processes","lineNameLoad","lineName","btnclicked","useState","length","PLine_name","map","operation","processGroup","filteredProcesses","filter","process","Operation_id_Operation"],"sources":["C:/Users/hujerp/OneDrive - Webasto Group/Dokumenty/GitHub/project_holec/frontend/src/routes/admin/Config.jsx"],"sourcesContent":["import { useEffect } from \"react\"\r\nimport {\r\n    QueryClient,\r\n    QueryClientProvider,\r\n    useQuery,\r\n  } from \"@tanstack/react-query\";\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\nasync function getOperations(IP, linkaId){\r\n    let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\nasync function getProcesses(IP, linkaId){\r\n    let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\n\r\n\r\nasync function getNameOfLine(IP, lineId) {\r\n    const response = await fetch(`http://${IP}:3005/getNameOfLine`, {\r\n        method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                PLine_id: lineId,\r\n            }),\r\n        });\r\n        return response.json();\r\n    }\r\nconst IP = '10.10.195.44'\r\n\r\nconst addNewProcess = (operationID) => {\r\n    Swal.fire({\r\n      title: 'Add new process',\r\n      html: `\r\n        <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n        <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n        <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n          <option value=\"btn\">Y/N button</option>\r\n          <option value=\"text\">Text</option>\r\n        </select>\r\n      `,\r\n      showCancelButton: true,\r\n      confirmButtonText: 'Confirm',\r\n      cancelButtonText: 'Cancel',\r\n      preConfirm: async () => {\r\n        let processName = document.getElementById('process-name').value;\r\n        let processType = document.getElementById('process-type').value;\r\n        try {\r\n          let response = await fetch(`http://${IP}:3005/createNewProcess`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({Process_name: processName, Operation_id: operationID, Process_type: processType}),\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          });\r\n  \r\n          if (response.status === 200) {\r\n            setBtnClicked(true);\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Success',\r\n              text: 'New process added successfully'\r\n            });\r\n          } else {\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error',\r\n              text: 'Failed to add new process, communication error'\r\n            });\r\n          }\r\n        } catch (error) {\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Error',\r\n            text: 'Failed to add new process, something went wrong'\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\nconst deleteProcess = (processID) => {\r\n    Swal.fire({\r\n        title: `Are you sure you want to delete process ID: ${processID}`,\r\n        text: \"\",\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Yes',\r\n        cancelButtonText: 'Cancel',\r\n        focusConfirm: false,\r\n        preConfirm: async () => {\r\n            // Call the API endpoint here\r\n            let response = await fetch(`http://${IP}:3005/deleteProcess`, {\r\n                method: 'DELETE',\r\n                body: JSON.stringify({Process_id: processID}),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            // Check the status of the response\r\n            if (response.status === 200) {\r\n                setBtnClicked(true);\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Success',\r\n                    text: 'Process deleted successfully'\r\n                });\r\n            } else {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Failed to delete process, something went wrong'\r\n                });\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nconst changeProcess = (processID, processName, processType) => {\r\n    Swal.fire({\r\n        title: 'Change process',\r\n        html: `\r\n            <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\r\n            <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n            <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n              <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\r\n              <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\r\n            </select>\r\n        `,\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Confirm',\r\n        cancelButtonText: 'Cancel',\r\n        preConfirm: async () => {\r\n            let updatedProcessName = document.getElementById('process-name').value;\r\n            let updatedProcessType = document.getElementById('process-type').value;\r\n            try {\r\n                let response = await fetch(`http://${IP}:3005/changeProcess`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify({Process_id: processID, Process_name: updatedProcessName, Process_type: updatedProcessType}),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      setBtnClicked(true);\r\n      Swal.fire({\r\n        icon: 'success',\r\n        title: 'Success',\r\n        text: 'Process changed successfully'\r\n      });\r\n    } else {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'Failed to change process, communication error'\r\n      });\r\n    }\r\n  } catch (error) {\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: 'Failed to change process, something went wrong'\r\n    });\r\n  }\r\n}\r\n});\r\n}\r\n\r\nconst createNewOperation = (linkaId) => {\r\nSwal.fire({\r\n  title: 'Add new Operation',\r\n  html: `\r\n    <textarea id=\"operation-name\" class=\"swal2-textarea\" placeholder=\"Operation name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n  `,\r\n  showCancelButton: true,\r\n  confirmButtonText: 'Confirm',\r\n  cancelButtonText: 'Cancel',\r\n  preConfirm: async () => {\r\n    let newOperationName = document.getElementById('operation-name').value;\r\n    try {\r\n      let response = await fetch(`http://${IP}:3005/createNewOperation`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({LinkaId: linkaId, Operation_name: newOperationName, }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        setBtnClicked(true);\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: 'Success',\r\n          text: 'New Operation added successfully'\r\n        });\r\n      } else {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error',\r\n          text: 'Failed to add new Operation, communication error'\r\n        });\r\n      }\r\n    } catch (error) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'Failed to add new Operation, something went wrong'\r\n      });\r\n    }\r\n  }\r\n});\r\n}\r\n\r\nconst deleteOperation = (operationId) => {\r\nSwal.fire({\r\n    title: `Are you sure you want to delete operation ID: ${operationId}`,\r\n    text: \"\",\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Yes',\r\n    cancelButtonText: 'Cancel',\r\n    focusConfirm: false,\r\n    preConfirm: async () => {\r\n        // Call the API endpoint here\r\n        let response = await fetch(`http://${IP}:3005/deleteOperation`, {\r\n            method: 'DELETE',\r\n            body: JSON.stringify({Operation_id: operationId}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        // Check the status of the response\r\n        if (response.status === 200) {\r\n            setBtnClicked(true);\r\n            Swal.fire({\r\n                icon: 'success',\r\n                title: 'Success',\r\n                text: 'Operation deleted successfully'\r\n            });\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Error',\r\n                text: 'Failed to delete operation, something went wrong'\r\n            });\r\n        }\r\n    }\r\n});\r\n};\r\n\r\n\r\nfunction AdminConfig() {\r\n\r\n\r\n    const { lineId } = useParams();\r\n    const {isLoading: operationsLoad, data: operations} = useQuery({queryKey: ['operations'], queryFn: async () => await getOperations(IP, lineId), initialData: []});\r\n    const {isLoading: processesLoad, data: processes} = useQuery({queryKey: ['processes'], queryFn: async () => await getProcesses(IP, lineId), initialData: []});\r\n    const {isLoading: lineNameLoad, data: lineName} = useQuery({queryKey: ['lineName'], queryFn: async () => await getNameOfLine(IP, lineId), initialData: []});\r\n\r\n    const [btnclicked, setBtnClicked] = useState(false);\r\n         \r\n\r\nif (lineNameLoad) {\r\n    return <span>Loading...</span>\r\n    }\r\n \r\n\r\n\r\n    return (        \r\n        <div className=\"bg-slate-300 w-11/12 h-full flex flex-col\">\r\n            <div>\r\n                <h1 className=\"text-3xl pt-10 pb-10 text-center\">{lineName.length > 0 ? lineName[0].PLine_name : 'N/A'}</h1>\r\n            </div>\r\n            {operations.map((operation) => {\r\n                return (\r\n                    <div className=\"bg-white flex flex-col border\">\r\n                        <div className=\"flex frex-row mb-5 mt-5 items-center\">\r\n                            <div className=\"bg-white\">\r\n                                <p className=\"bg-slate-200 text-xl p-2 ml-4\">{operation.Operation_name}</p>\r\n                                <button className=\"ml-5 mt-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => deleteOperation(operation.Operation_id)}>Delete Operation</button>\r\n                            </div>\r\n                            <div className=\"ml-5 rounded-3xl p-3 border\">\r\n                                {processes.map((processGroup) => {\r\n                                const filteredProcesses = processGroup.filter((process) => process.Operation_id_Operation === operation.Operation_id);\r\n                                return filteredProcesses.map((process) => {\r\n                                    return (\r\n                                    <div className=\"w-full p-2\">\r\n                                        <a className=\"bg-white text underline underline-offset-4\" id={process.Process_id}>{process.Process_name}</a>\r\n                                        <a className=\"ml-5\">{process.Process_type}</a>\r\n                                        <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => changeProcess(process.Process_id, process.Process_name, process.Process_type)}>Change</button>\r\n                                        <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => deleteProcess(process.Process_id)}>Delete</button>\r\n                                    </div>\r\n                                    );\r\n                                });\r\n                                })}\r\n                                <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => addNewProcess(operation.Operation_id)}>+ Add new Process</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n                })}\r\n            <div className=\"pt-5 pl-5 pb-5 border\">\r\n                <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => createNewOperation(lineId)}>+Add new Operation</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default AdminConfig;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}