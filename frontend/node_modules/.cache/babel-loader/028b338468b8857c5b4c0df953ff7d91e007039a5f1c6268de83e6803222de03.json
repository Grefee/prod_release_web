{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hujerp\\\\OneDrive - Webasto Group\\\\Dokumenty\\\\GitHub\\\\project_holec\\\\frontend\\\\src\\\\routes\\\\admin\\\\Config.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { QueryClient, QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function getOperations(IP, linkaId) {\n  let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: linkaId\n    })\n  });\n  return response.json();\n}\nasync function getProcesses(IP, linkaId) {\n  let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: linkaId\n    })\n  });\n  return response.json();\n}\nconst IP = '10.10.195.44';\nfunction AdminConfig() {\n  _s();\n  const {\n    lineId\n  } = useParams();\n  const {\n    isLoading,\n    data: operations,\n    data: processes\n  } = useQuery({\n    queryKey: ['operations'],\n    queryFn: async () => await getOperations(IP, lineId),\n    initialData: []\n  }, {\n    queryKey: ['processes'],\n    queryFn: async () => await getProcesses(IP, lineId),\n    initialData: []\n  });\n  const addNewProcess = operationID => {\n    Swal.fire({\n      title: 'Add new process',\n      html: `\n                    <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\n                    <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\n                    <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\n                      <option value=\"btn\">Y/N button</option>\n                      <option value=\"text\">Text</option>\n                    </select>\n                  `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm',\n      cancelButtonText: 'Cancel',\n      preConfirm: async () => {\n        let processName = document.getElementById('process-name').value;\n        let processType = document.getElementById('process-type').value;\n        try {\n          let response = await fetch('http://' + apiIP + ':3005/createNewProcess', {\n            method: 'POST',\n            body: JSON.stringify({\n              Process_name: processName,\n              Operation_id: operationID,\n              Process_type: processType\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if (response.status === 200) {\n            setBtnClicked(true);\n            Swal.fire({\n              icon: 'success',\n              title: 'Success',\n              text: 'New process added successfully'\n            });\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: 'Failed to add new process, communication error'\n            });\n          }\n        } catch (error) {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to add new process, something went wrong'\n          });\n        }\n      }\n    });\n  };\n  const deleteProcess = processID => {\n    Swal.fire({\n      title: `Are you sure you want to delete process ID: ${processID}`,\n      text: \"\",\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'Cancel',\n      focusConfirm: false,\n      preConfirm: async () => {\n        // Call the API endpoint here\n        let response = await fetch('http://' + apiIP + ':3005/deleteProcess', {\n          method: 'DELETE',\n          body: JSON.stringify({\n            Process_id: processID\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Check the status of the response\n        if (response.status === 200) {\n          setBtnClicked(true);\n          Swal.fire({\n            icon: 'success',\n            title: 'Success',\n            text: 'Process deleted successfully'\n          });\n        } else {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to delete process, something went wrong'\n          });\n        }\n      }\n    });\n  };\n  const changeProcess = (processID, processName, processType) => {\n    Swal.fire({\n      title: 'Change process',\n      html: `\n                        <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\n                        <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\n                        <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\n                          <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\n                          <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\n                        </select>\n                    `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm',\n      cancelButtonText: 'Cancel',\n      preConfirm: async () => {\n        let updatedProcessName = document.getElementById('process-name').value;\n        let updatedProcessType = document.getElementById('process-type').value;\n        try {\n          let response = await fetch('http://' + apiIP + ':3005/changeProcess', {\n            method: 'PUT',\n            body: JSON.stringify({\n              Process_id: processID,\n              Process_name: updatedProcessName,\n              Process_type: updatedProcessType\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if (response.status === 200) {\n            setBtnClicked(true);\n            Swal.fire({\n              icon: 'success',\n              title: 'Success',\n              text: 'Process changed successfully'\n            });\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: 'Failed to change process, communication error'\n            });\n          }\n        } catch (error) {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to change process, something went wrong'\n          });\n        }\n      }\n    });\n  };\n  const createNewOperation = linkaId => {\n    Swal.fire({\n      title: 'Add new Operation',\n      html: `\n                <textarea id=\"operation-name\" class=\"swal2-textarea\" placeholder=\"Operation name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\n              `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm',\n      cancelButtonText: 'Cancel',\n      preConfirm: async () => {\n        let newOperationName = document.getElementById('operation-name').value;\n        try {\n          let response = await fetch('http://' + apiIP + ':3005/createNewOperation', {\n            method: 'POST',\n            body: JSON.stringify({\n              LinkaId: linkaId,\n              Operation_name: newOperationName\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if (response.status === 200) {\n            setBtnClicked(true);\n            Swal.fire({\n              icon: 'success',\n              title: 'Success',\n              text: 'New Operation added successfully'\n            });\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: 'Failed to add new Operation, communication error'\n            });\n          }\n        } catch (error) {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to add new Operation, something went wrong'\n          });\n        }\n      }\n    });\n  };\n  const deleteOperation = operationId => {\n    Swal.fire({\n      title: `Are you sure you want to delete operation ID: ${operationId}`,\n      text: \"\",\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'Cancel',\n      focusConfirm: false,\n      preConfirm: async () => {\n        // Call the API endpoint here\n        let response = await fetch('http://' + apiIP + ':3005/deleteOperation', {\n          method: 'DELETE',\n          body: JSON.stringify({\n            Operation_id: operationId\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Check the status of the response\n        if (response.status === 200) {\n          setBtnClicked(true);\n          Swal.fire({\n            icon: 'success',\n            title: 'Success',\n            text: 'Operation deleted successfully'\n          });\n        } else {\n          Swal.fire({\n            icon: 'error',\n            title: 'Error',\n            text: 'Failed to delete operation, something went wrong'\n          });\n        }\n      }\n    });\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-slate-300 w-11/12 h-full flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [console.log(processes), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl pt-10 pb-10 text-center\",\n        children: linkaName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }, this), operations.map(operation => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white flex flex-col border\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex frex-row mb-5 mt-5 items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"bg-slate-200 text-xl p-2 ml-4\",\n              children: operation.Operation_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"ml-5 mt-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n              onClick: () => deleteOperation(operation.Operation_id),\n              children: \"Delete Operation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ml-5 rounded-3xl p-3 border\",\n            children: [processes.map(processGroup => {\n              const filteredProcesses = processGroup.filter(process => process.Operation_id_Operation === operation.Operation_id);\n              return filteredProcesses.map(process => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"w-full p-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                    className: \"bg-white text underline underline-offset-4\",\n                    id: process.Process_id,\n                    children: process.Process_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 343,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                    className: \"ml-5\",\n                    children: process.Process_type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 344,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n                    onClick: () => changeProcess(process.Process_id, process.Process_name, process.Process_type),\n                    children: \"Change\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n                    onClick: () => deleteProcess(process.Process_id),\n                    children: \"Delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 37\n                }, this);\n              });\n            }), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n              onClick: () => addNewProcess(operation.Operation_id),\n              children: \"+ Add new Process\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-5 pl-5 pb-5 border\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n        onClick: () => createNewOperation(linkaId),\n        children: \"+Add new Operation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminConfig, \"PKsuFLJfqWVr+eMoKmH2m3FifS8=\", false, function () {\n  return [useParams, useQuery];\n});\n_c = AdminConfig;\nexport default AdminConfig;\nvar _c;\n$RefreshReg$(_c, \"AdminConfig\");","map":{"version":3,"names":["useEffect","QueryClient","QueryClientProvider","useQuery","useParams","getOperations","IP","linkaId","response","fetch","method","headers","body","JSON","stringify","PLine_id","json","getProcesses","AdminConfig","lineId","isLoading","data","operations","processes","queryKey","queryFn","initialData","addNewProcess","operationID","Swal","fire","title","html","showCancelButton","confirmButtonText","cancelButtonText","preConfirm","processName","document","getElementById","value","processType","apiIP","Process_name","Operation_id","Process_type","status","setBtnClicked","icon","text","error","deleteProcess","processID","focusConfirm","Process_id","changeProcess","updatedProcessName","updatedProcessType","createNewOperation","newOperationName","LinkaId","Operation_name","deleteOperation","operationId","console","log","linkaName","map","operation","processGroup","filteredProcesses","filter","process","Operation_id_Operation"],"sources":["C:/Users/hujerp/OneDrive - Webasto Group/Dokumenty/GitHub/project_holec/frontend/src/routes/admin/Config.jsx"],"sourcesContent":["import { useEffect } from \"react\"\r\nimport {\r\n    QueryClient,\r\n    QueryClientProvider,\r\n    useQuery,\r\n  } from \"@tanstack/react-query\";\r\n\r\n  import { useParams } from 'react-router-dom';\r\n\r\n\r\nasync function getOperations(IP, linkaId){\r\n    let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\nasync function getProcesses(IP, linkaId){\r\n    let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\n\r\nconst IP = '10.10.195.44'\r\n\r\nfunction AdminConfig() {\r\n\r\n\r\n    const { lineId } = useParams();\r\n    const {isLoading, data: operations, data: processes} = useQuery({queryKey: ['operations'], queryFn: async () => await getOperations(IP, lineId), initialData: []},\r\n             {queryKey: ['processes'], queryFn: async () => await getProcesses(IP, lineId), initialData: []});  \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n             const addNewProcess = (operationID) => {\r\n                Swal.fire({\r\n                  title: 'Add new process',\r\n                  html: `\r\n                    <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n                    <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n                    <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n                      <option value=\"btn\">Y/N button</option>\r\n                      <option value=\"text\">Text</option>\r\n                    </select>\r\n                  `,\r\n                  showCancelButton: true,\r\n                  confirmButtonText: 'Confirm',\r\n                  cancelButtonText: 'Cancel',\r\n                  preConfirm: async () => {\r\n                    let processName = document.getElementById('process-name').value;\r\n                    let processType = document.getElementById('process-type').value;\r\n                    try {\r\n                      let response = await fetch('http://'+apiIP+':3005/createNewProcess', {\r\n                        method: 'POST',\r\n                        body: JSON.stringify({Process_name: processName, Operation_id: operationID, Process_type: processType}),\r\n                        headers: {\r\n                          'Content-Type': 'application/json'\r\n                        }\r\n                      });\r\n              \r\n                      if (response.status === 200) {\r\n                        setBtnClicked(true);\r\n                        Swal.fire({\r\n                          icon: 'success',\r\n                          title: 'Success',\r\n                          text: 'New process added successfully'\r\n                        });\r\n                      } else {\r\n                        Swal.fire({\r\n                          icon: 'error',\r\n                          title: 'Error',\r\n                          text: 'Failed to add new process, communication error'\r\n                        });\r\n                      }\r\n                    } catch (error) {\r\n                      Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Error',\r\n                        text: 'Failed to add new process, something went wrong'\r\n                      });\r\n                    }\r\n                  }\r\n                });\r\n              }\r\n        \r\n              \r\n            const deleteProcess = (processID) => {\r\n                Swal.fire({\r\n                    title: `Are you sure you want to delete process ID: ${processID}`,\r\n                    text: \"\",\r\n                    showCancelButton: true,\r\n                    confirmButtonText: 'Yes',\r\n                    cancelButtonText: 'Cancel',\r\n                    focusConfirm: false,\r\n                    preConfirm: async () => {\r\n                        // Call the API endpoint here\r\n                        let response = await fetch('http://'+apiIP+':3005/deleteProcess', {\r\n                            method: 'DELETE',\r\n                            body: JSON.stringify({Process_id: processID}),\r\n                            headers: {\r\n                                'Content-Type': 'application/json'\r\n                            }\r\n                        });\r\n        \r\n                        // Check the status of the response\r\n                        if (response.status === 200) {\r\n                            setBtnClicked(true);\r\n                            Swal.fire({\r\n                                icon: 'success',\r\n                                title: 'Success',\r\n                                text: 'Process deleted successfully'\r\n                            });\r\n                        } else {\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Error',\r\n                                text: 'Failed to delete process, something went wrong'\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n            \r\n            const changeProcess = (processID, processName, processType) => {\r\n                Swal.fire({\r\n                    title: 'Change process',\r\n                    html: `\r\n                        <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\r\n                        <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n                        <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n                          <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\r\n                          <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\r\n                        </select>\r\n                    `,\r\n                    showCancelButton: true,\r\n                    confirmButtonText: 'Confirm',\r\n                    cancelButtonText: 'Cancel',\r\n                    preConfirm: async () => {\r\n                        let updatedProcessName = document.getElementById('process-name').value;\r\n                        let updatedProcessType = document.getElementById('process-type').value;\r\n                        try {\r\n                            let response = await fetch('http://'+apiIP+':3005/changeProcess', {\r\n                  method: 'PUT',\r\n                  body: JSON.stringify({Process_id: processID, Process_name: updatedProcessName, Process_type: updatedProcessType}),\r\n                  headers: {\r\n                    'Content-Type': 'application/json'\r\n                  }\r\n                });\r\n        \r\n                if (response.status === 200) {\r\n                  setBtnClicked(true);\r\n                  Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Success',\r\n                    text: 'Process changed successfully'\r\n                  });\r\n                } else {\r\n                  Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Failed to change process, communication error'\r\n                  });\r\n                }\r\n              } catch (error) {\r\n                Swal.fire({\r\n                  icon: 'error',\r\n                  title: 'Error',\r\n                  text: 'Failed to change process, something went wrong'\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n        \r\n        const createNewOperation = (linkaId) => {\r\n            Swal.fire({\r\n              title: 'Add new Operation',\r\n              html: `\r\n                <textarea id=\"operation-name\" class=\"swal2-textarea\" placeholder=\"Operation name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n              `,\r\n              showCancelButton: true,\r\n              confirmButtonText: 'Confirm',\r\n              cancelButtonText: 'Cancel',\r\n              preConfirm: async () => {\r\n                let newOperationName = document.getElementById('operation-name').value;\r\n                try {\r\n                  let response = await fetch('http://'+apiIP+':3005/createNewOperation', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({LinkaId: linkaId, Operation_name: newOperationName, }),\r\n                    headers: {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                  });\r\n          \r\n                  if (response.status === 200) {\r\n                    setBtnClicked(true);\r\n                    Swal.fire({\r\n                      icon: 'success',\r\n                      title: 'Success',\r\n                      text: 'New Operation added successfully'\r\n                    });\r\n                  } else {\r\n                    Swal.fire({\r\n                      icon: 'error',\r\n                      title: 'Error',\r\n                      text: 'Failed to add new Operation, communication error'\r\n                    });\r\n                  }\r\n                } catch (error) {\r\n                  Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Failed to add new Operation, something went wrong'\r\n                  });\r\n                }\r\n              }\r\n            });\r\n          }\r\n        \r\n          const deleteOperation = (operationId) => {\r\n            Swal.fire({\r\n                title: `Are you sure you want to delete operation ID: ${operationId}`,\r\n                text: \"\",\r\n                showCancelButton: true,\r\n                confirmButtonText: 'Yes',\r\n                cancelButtonText: 'Cancel',\r\n                focusConfirm: false,\r\n                preConfirm: async () => {\r\n                    // Call the API endpoint here\r\n                    let response = await fetch('http://'+apiIP+':3005/deleteOperation', {\r\n                        method: 'DELETE',\r\n                        body: JSON.stringify({Operation_id: operationId}),\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    });\r\n        \r\n                    // Check the status of the response\r\n                    if (response.status === 200) {\r\n                        setBtnClicked(true);\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: 'Success',\r\n                            text: 'Operation deleted successfully'\r\n                        });\r\n                    } else {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Error',\r\n                            text: 'Failed to delete operation, something went wrong'\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nif (isLoading) {\r\n    return <span>Loading...</span>\r\n    }    \r\n\r\n\r\n    return (        \r\n        <div className=\"bg-slate-300 w-11/12 h-full flex flex-col\">\r\n            <div>\r\n                {console.log(processes)}\r\n                <h1 className=\"text-3xl pt-10 pb-10 text-center\">{linkaName}</h1>\r\n            </div>\r\n            {operations.map((operation) => {\r\n                return (\r\n                    <div className=\"bg-white flex flex-col border\">\r\n                        <div className=\"flex frex-row mb-5 mt-5 items-center\">\r\n                            <div className=\"bg-white\">\r\n                                <p className=\"bg-slate-200 text-xl p-2 ml-4\">{operation.Operation_name}</p>\r\n                                <button className=\"ml-5 mt-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => deleteOperation(operation.Operation_id)}>Delete Operation</button>\r\n                            </div>\r\n                            <div className=\"ml-5 rounded-3xl p-3 border\">\r\n                                {processes.map((processGroup) => {\r\n                                const filteredProcesses = processGroup.filter((process) => process.Operation_id_Operation === operation.Operation_id);\r\n                                return filteredProcesses.map((process) => {\r\n                                    return (\r\n                                    <div className=\"w-full p-2\">\r\n                                        <a className=\"bg-white text underline underline-offset-4\" id={process.Process_id}>{process.Process_name}</a>\r\n                                        <a className=\"ml-5\">{process.Process_type}</a>\r\n                                        <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => changeProcess(process.Process_id, process.Process_name, process.Process_type)}>Change</button>\r\n                                        <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => deleteProcess(process.Process_id)}>Delete</button>\r\n                                    </div>\r\n                                    );\r\n                                });\r\n                                })}\r\n                                <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => addNewProcess(operation.Operation_id)}>+ Add new Process</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n                })}\r\n            <div className=\"pt-5 pl-5 pb-5 border\">\r\n                <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => createNewOperation(linkaId)}>+Add new Operation</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default AdminConfig;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}