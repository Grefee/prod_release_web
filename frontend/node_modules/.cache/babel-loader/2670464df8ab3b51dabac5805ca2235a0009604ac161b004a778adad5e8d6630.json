{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hujerp\\\\OneDrive - Webasto Group\\\\Dokumenty\\\\GitHub\\\\project_holec\\\\frontend\\\\src\\\\routes\\\\admin\\\\Config.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { QueryClient, QueryClientProvider, useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useParams } from 'react-router-dom';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function getOperations(IP, linkaId) {\n  let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: linkaId\n    })\n  });\n  return response.json();\n}\nasync function getProcesses(IP, linkaId) {\n  let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: linkaId\n    })\n  });\n  return response.json();\n}\nasync function getNameOfLine(IP, lineId) {\n  const response = await fetch(`http://${IP}:3005/getNameOfLine`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: lineId\n    })\n  });\n  return response.json();\n}\nconst IP = '10.10.195.44';\nasync function addNewProcess(operationID) {\n  _s();\n  const [addNewProcessMutation, {\n    status,\n    error\n  }] = useMutation(() => {\n    return (processName, operationID, processType) => {\n      return fetch(`http://${IP}:3005/getNameOfLine`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          Process_name: processName,\n          Operation_id: operationID,\n          Process_type: processType\n        })\n      });\n    };\n  });\n}\n_s(addNewProcess, \"+4M9evKyEwRdwgm+2Fqcl4MC7d8=\", false, function () {\n  return [useMutation];\n});\nfunction AdminConfig() {\n  _s2();\n  const {\n    lineId\n  } = useParams();\n  const {\n    isLoading: operationsLoad,\n    data: operations\n  } = useQuery({\n    queryKey: ['operations'],\n    queryFn: async () => await getOperations(IP, lineId),\n    initialData: []\n  });\n  const {\n    isLoading: processesLoad,\n    data: processes\n  } = useQuery({\n    queryKey: ['processes'],\n    queryFn: async () => await getProcesses(IP, lineId),\n    initialData: []\n  });\n  const {\n    isLoading: lineNameLoad,\n    data: lineName\n  } = useQuery({\n    queryKey: ['lineName'],\n    queryFn: async () => await getNameOfLine(IP, lineId),\n    initialData: []\n  });\n  const [addNewProcessMutation, {\n    status,\n    error\n  }] = useMutation(async (processName, operationID, processType) => {\n    return fetch(`http://${IP}:3005/addNewProcess`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        Process_name: processName,\n        Operation_id: operationID,\n        Process_type: processType\n      })\n    });\n  }, {\n    onSuccess: () => {\n      Swal.fire({\n        icon: \"success\",\n        title: \"Success\",\n        text: \"New process added successfully\"\n      });\n    },\n    onError: error => {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Error\",\n        text: `Failed to add new process: ${error.message}`\n      });\n    }\n  });\n  const addNewProcess = async operationID => {\n    try {\n      await addNewProcessMutation(processName, operationID, processType);\n    } catch (error) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"Error\",\n        text: `Failed to add new process: ${error.message}`\n      });\n    }\n\n    /*         Swal.fire({\r\n                title: \"Add new process\",\r\n                html: `\r\n                        <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n                        <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n                        <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n                          <option value=\"btn\">Y/N button</option>\r\n                          <option value=\"text\">Text</option>\r\n                        </select>\r\n                      `,\r\n                showCancelButton: true,\r\n                confirmButtonText: \"Confirm\",\r\n                cancelButtonText: \"Cancel\",\r\n                preConfirm: async () => {\r\n                  let processName = document.getElementById(\"process-name\").value;\r\n                  let processType = document.getElementById(\"process-type\").value;\r\n            \r\n                  try {\r\n                    await addNewProcessMutation(processName, operationID, processType);\r\n            \r\n                    if (status === \"success\") {\r\n                      Swal.fire({\r\n                        icon: \"success\",\r\n                        title: \"Success\",\r\n                        text: \"New process added successfully\",\r\n                      });\r\n                    } else {\r\n                      Swal.fire({\r\n                        icon: \"error\",\r\n                        title: \"Error\",\r\n                        text: \"Failed to add new process, communication error\",\r\n                    });\r\n                  }\r\n                } catch (error) {\r\n                  Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Failed to add new process, something went wrong'\r\n                  });\r\n                }\r\n              }\r\n            }); */\n\n    const deleteProcess = processID => {\n      Swal.fire({\n        title: `Are you sure you want to delete process ID: ${processID}`,\n        text: \"\",\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'Cancel',\n        focusConfirm: false,\n        preConfirm: async () => {\n          // Call the API endpoint here\n          let response = await fetch(`http://${IP}:3005/deleteProcess`, {\n            method: 'DELETE',\n            body: JSON.stringify({\n              Process_id: processID\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n\n          // Check the status of the response\n          if (response.status === 200) {\n            Swal.fire({\n              icon: 'success',\n              title: 'Success',\n              text: 'Process deleted successfully'\n            });\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: 'Failed to delete process, something went wrong'\n            });\n          }\n        }\n      });\n    };\n    const changeProcess = (processID, processName, processType) => {\n      Swal.fire({\n        title: 'Change process',\n        html: `\n                        <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\n                        <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\n                        <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\n                          <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\n                          <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\n                        </select>\n                    `,\n        showCancelButton: true,\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        preConfirm: async () => {\n          let updatedProcessName = document.getElementById('process-name').value;\n          let updatedProcessType = document.getElementById('process-type').value;\n          try {\n            let response = await fetch(`http://${IP}:3005/changeProcess`, {\n              method: 'PUT',\n              body: JSON.stringify({\n                Process_id: processID,\n                Process_name: updatedProcessName,\n                Process_type: updatedProcessType\n              }),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            if (response.status === 200) {\n              Swal.fire({\n                icon: 'success',\n                title: 'Success',\n                text: 'Process changed successfully'\n              });\n            } else {\n              Swal.fire({\n                icon: 'error',\n                title: 'Error',\n                text: 'Failed to change process, communication error'\n              });\n            }\n          } catch (error) {\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: 'Failed to change process, something went wrong'\n            });\n          }\n        }\n      });\n    };\n    const createNewOperation = linkaId => {\n      Swal.fire({\n        title: 'Add new Operation',\n        html: `\n                <textarea id=\"operation-name\" class=\"swal2-textarea\" placeholder=\"Operation name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\n              `,\n        showCancelButton: true,\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        preConfirm: async () => {\n          let newOperationName = document.getElementById('operation-name').value;\n          try {\n            let response = await fetch(`http://${IP}:3005/createNewOperation`, {\n              method: 'POST',\n              body: JSON.stringify({\n                LinkaId: linkaId,\n                Operation_name: newOperationName\n              }),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            if (response.status === 200) {\n              Swal.fire({\n                icon: 'success',\n                title: 'Success',\n                text: 'New Operation added successfully'\n              });\n            } else {\n              Swal.fire({\n                icon: 'error',\n                title: 'Error',\n                text: 'Failed to add new Operation, communication error'\n              });\n            }\n          } catch (error) {\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: 'Failed to add new Operation, something went wrong'\n            });\n          }\n        }\n      });\n    };\n    const deleteOperation = operationId => {\n      Swal.fire({\n        title: `Are you sure you want to delete operation ID: ${operationId}`,\n        text: \"\",\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'Cancel',\n        focusConfirm: false,\n        preConfirm: async () => {\n          // Call the API endpoint here\n          let response = await fetch(`http://${IP}:3005/deleteOperation`, {\n            method: 'DELETE',\n            body: JSON.stringify({\n              Operation_id: operationId\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n\n          // Check the status of the response\n          if (response.status === 200) {\n            Swal.fire({\n              icon: 'success',\n              title: 'Success',\n              text: 'Operation deleted successfully'\n            });\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Error',\n              text: 'Failed to delete operation, something went wrong'\n            });\n          }\n        }\n      });\n    };\n    if (lineNameLoad) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 12\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-slate-300 w-11/12 h-full flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl pt-10 pb-10 text-center\",\n          children: lineName.length > 0 ? lineName[0].PLine_name : 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 13\n      }, this), operations.map(operation => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white flex flex-col border\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex frex-row mb-5 mt-5 items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bg-white\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"bg-slate-200 text-xl p-2 ml-4\",\n                children: operation.Operation_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"ml-5 mt-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n                onClick: () => deleteOperation(operation.Operation_id),\n                children: \"Delete Operation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ml-5 rounded-3xl p-3 border\",\n              children: [processes.map(processGroup => {\n                const filteredProcesses = processGroup.filter(process => process.Operation_id_Operation === operation.Operation_id);\n                return filteredProcesses.map(process => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"w-full p-2\",\n                    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                      className: \"bg-white text underline underline-offset-4\",\n                      id: process.Process_id,\n                      children: process.Process_name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 364,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                      className: \"ml-5\",\n                      children: process.Process_type\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 365,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n                      onClick: () => changeProcess(process.Process_id, process.Process_name, process.Process_type),\n                      children: \"Change\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 366,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n                      onClick: () => deleteProcess(process.Process_id),\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 367,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 363,\n                    columnNumber: 37\n                  }, this);\n                });\n              }), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n                onClick: () => addNewProcess(operation.Operation_id),\n                children: \"+ Add new Process\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pt-5 pl-5 pb-5 border\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n          onClick: () => createNewOperation(lineId),\n          children: \"+Add new Operation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }, this);\n  };\n}\n_s2(AdminConfig, \"CvBabaJVFfth3Ci3/RyoLrgC1gc=\", false, function () {\n  return [useParams, useQuery, useQuery, useQuery, useMutation];\n});\n_c = AdminConfig;\nexport default AdminConfig;\nvar _c;\n$RefreshReg$(_c, \"AdminConfig\");","map":{"version":3,"names":["useEffect","QueryClient","QueryClientProvider","useQuery","useMutation","useParams","Swal","getOperations","IP","linkaId","response","fetch","method","headers","body","JSON","stringify","PLine_id","json","getProcesses","getNameOfLine","lineId","addNewProcess","operationID","addNewProcessMutation","status","error","processName","processType","Process_name","Operation_id","Process_type","AdminConfig","isLoading","operationsLoad","data","operations","queryKey","queryFn","initialData","processesLoad","processes","lineNameLoad","lineName","onSuccess","fire","icon","title","text","onError","message","deleteProcess","processID","showCancelButton","confirmButtonText","cancelButtonText","focusConfirm","preConfirm","Process_id","changeProcess","html","updatedProcessName","document","getElementById","value","updatedProcessType","createNewOperation","newOperationName","LinkaId","Operation_name","deleteOperation","operationId","length","PLine_name","map","operation","processGroup","filteredProcesses","filter","process","Operation_id_Operation"],"sources":["C:/Users/hujerp/OneDrive - Webasto Group/Dokumenty/GitHub/project_holec/frontend/src/routes/admin/Config.jsx"],"sourcesContent":["import { useEffect } from \"react\"\r\nimport {\r\n    QueryClient,\r\n    QueryClientProvider,\r\n    useQuery,\r\n    useMutation,\r\n  } from \"@tanstack/react-query\";\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\nasync function getOperations(IP, linkaId){\r\n    let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\nasync function getProcesses(IP, linkaId){\r\n    let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\n\r\n\r\nasync function getNameOfLine(IP, lineId) {\r\n    const response = await fetch(`http://${IP}:3005/getNameOfLine`, {\r\n        method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                PLine_id: lineId,\r\n            }),\r\n        });\r\n        return response.json();\r\n    }\r\n\r\n\r\nconst IP = '10.10.195.44'\r\n\r\nasync function addNewProcess  (operationID) {\r\n    const [addNewProcessMutation, { status, error }] = useMutation(() => {\r\n      return (processName, operationID, processType) => {\r\n        return fetch(`http://${IP}:3005/getNameOfLine`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            Process_name: processName,\r\n            Operation_id: operationID,\r\n            Process_type: processType,\r\n          }),\r\n        });\r\n      };\r\n    });}\r\n\r\n\r\nfunction AdminConfig() {\r\n\r\n\r\n    const { lineId } = useParams();\r\n    const {isLoading: operationsLoad, data: operations} = useQuery({queryKey: ['operations'], queryFn: async () => await getOperations(IP, lineId), initialData: []});\r\n    const {isLoading: processesLoad, data: processes} = useQuery({queryKey: ['processes'], queryFn: async () => await getProcesses(IP, lineId), initialData: []});\r\n    const {isLoading: lineNameLoad, data: lineName} = useQuery({queryKey: ['lineName'], queryFn: async () => await getNameOfLine(IP, lineId), initialData: []});\r\n\r\n    const [addNewProcessMutation, { status, error }] = useMutation(\r\n        async (processName, operationID, processType) => {\r\n            return fetch(`http://${IP}:3005/addNewProcess`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    Process_name: processName,\r\n                    Operation_id: operationID,\r\n                    Process_type: processType,\r\n                }),\r\n            });\r\n        },\r\n        {\r\n            onSuccess: () => {\r\n                Swal.fire({\r\n                    icon: \"success\",\r\n                    title: \"Success\",\r\n                    text: \"New process added successfully\",\r\n                });\r\n            },\r\n            onError: (error) => {\r\n                Swal.fire({\r\n                    icon: \"error\",\r\n                    title: \"Error\",\r\n                    text: `Failed to add new process: ${error.message}`,\r\n                });\r\n            }\r\n        }\r\n    );\r\n\r\n    const addNewProcess = async (operationID) => {\r\n        try {\r\n            await addNewProcessMutation(processName, operationID, processType);\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Error\",\r\n                text: `Failed to add new process: ${error.message}`,\r\n            });\r\n        }\r\n     \r\n    \r\n\r\n      \r\n/*         Swal.fire({\r\n            title: \"Add new process\",\r\n            html: `\r\n                    <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n                    <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n                    <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n                      <option value=\"btn\">Y/N button</option>\r\n                      <option value=\"text\">Text</option>\r\n                    </select>\r\n                  `,\r\n            showCancelButton: true,\r\n            confirmButtonText: \"Confirm\",\r\n            cancelButtonText: \"Cancel\",\r\n            preConfirm: async () => {\r\n              let processName = document.getElementById(\"process-name\").value;\r\n              let processType = document.getElementById(\"process-type\").value;\r\n        \r\n              try {\r\n                await addNewProcessMutation(processName, operationID, processType);\r\n        \r\n                if (status === \"success\") {\r\n                  Swal.fire({\r\n                    icon: \"success\",\r\n                    title: \"Success\",\r\n                    text: \"New process added successfully\",\r\n                  });\r\n                } else {\r\n                  Swal.fire({\r\n                    icon: \"error\",\r\n                    title: \"Error\",\r\n                    text: \"Failed to add new process, communication error\",\r\n                });\r\n              }\r\n            } catch (error) {\r\n              Swal.fire({\r\n                icon: 'error',\r\n                title: 'Error',\r\n                text: 'Failed to add new process, something went wrong'\r\n              });\r\n            }\r\n          }\r\n        }); */\r\n        \r\n              \r\n            const deleteProcess = (processID) => {\r\n                Swal.fire({\r\n                    title: `Are you sure you want to delete process ID: ${processID}`,\r\n                    text: \"\",\r\n                    showCancelButton: true,\r\n                    confirmButtonText: 'Yes',\r\n                    cancelButtonText: 'Cancel',\r\n                    focusConfirm: false,\r\n                    preConfirm: async () => {\r\n                        // Call the API endpoint here\r\n                        let response = await fetch(`http://${IP}:3005/deleteProcess`, {\r\n                            method: 'DELETE',\r\n                            body: JSON.stringify({Process_id: processID}),\r\n                            headers: {\r\n                                'Content-Type': 'application/json'\r\n                            }\r\n                        });\r\n        \r\n                        // Check the status of the response\r\n                        if (response.status === 200) {\r\n                            Swal.fire({\r\n                                icon: 'success',\r\n                                title: 'Success',\r\n                                text: 'Process deleted successfully'\r\n                            });\r\n                        } else {\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Error',\r\n                                text: 'Failed to delete process, something went wrong'\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n            \r\n            const changeProcess = (processID, processName, processType) => {\r\n                Swal.fire({\r\n                    title: 'Change process',\r\n                    html: `\r\n                        <textarea id=\"process-name\" class=\"swal2-textarea\" placeholder=\"Process name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\">${processName}</textarea>\r\n                        <label for=\"process-type\" style=\"display: inline-block; margin-top: 10px;\">Pick process type:</label>\r\n                        <select id=\"process-type\" class=\"swal2-select\" style=\"margin-left: 10px; border: 1px solid #d9d9d9;\">\r\n                          <option value=\"btn\" ${processType === 'btn' ? 'selected' : ''}>Y/N button</option>\r\n                          <option value=\"text\" ${processType === 'text' ? 'selected' : ''}>Text</option>\r\n                        </select>\r\n                    `,\r\n                    showCancelButton: true,\r\n                    confirmButtonText: 'Confirm',\r\n                    cancelButtonText: 'Cancel',\r\n                    preConfirm: async () => {\r\n                        let updatedProcessName = document.getElementById('process-name').value;\r\n                        let updatedProcessType = document.getElementById('process-type').value;\r\n                        try {\r\n                            let response = await fetch(`http://${IP}:3005/changeProcess`, {\r\n                  method: 'PUT',\r\n                  body: JSON.stringify({Process_id: processID, Process_name: updatedProcessName, Process_type: updatedProcessType}),\r\n                  headers: {\r\n                    'Content-Type': 'application/json'\r\n                  }\r\n                });\r\n        \r\n                if (response.status === 200) {\r\n                  Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Success',\r\n                    text: 'Process changed successfully'\r\n                  });\r\n                } else {\r\n                  Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Failed to change process, communication error'\r\n                  });\r\n                }\r\n              } catch (error) {\r\n                Swal.fire({\r\n                  icon: 'error',\r\n                  title: 'Error',\r\n                  text: 'Failed to change process, something went wrong'\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n        \r\n        const createNewOperation = (linkaId) => {\r\n            Swal.fire({\r\n              title: 'Add new Operation',\r\n              html: `\r\n                <textarea id=\"operation-name\" class=\"swal2-textarea\" placeholder=\"Operation name\" style=\"min-width: 350px; height: 100px; word-wrap: break-word;\"></textarea>\r\n              `,\r\n              showCancelButton: true,\r\n              confirmButtonText: 'Confirm',\r\n              cancelButtonText: 'Cancel',\r\n              preConfirm: async () => {\r\n                let newOperationName = document.getElementById('operation-name').value;\r\n                try {\r\n                  let response = await fetch(`http://${IP}:3005/createNewOperation`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({LinkaId: linkaId, Operation_name: newOperationName, }),\r\n                    headers: {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                  });\r\n          \r\n                  if (response.status === 200) {\r\n                    Swal.fire({\r\n                      icon: 'success',\r\n                      title: 'Success',\r\n                      text: 'New Operation added successfully'\r\n                    });\r\n                  } else {\r\n                    Swal.fire({\r\n                      icon: 'error',\r\n                      title: 'Error',\r\n                      text: 'Failed to add new Operation, communication error'\r\n                    });\r\n                  }\r\n                } catch (error) {\r\n                  Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Error',\r\n                    text: 'Failed to add new Operation, something went wrong'\r\n                  });\r\n                }\r\n              }\r\n            });\r\n          }\r\n        \r\n          const deleteOperation = (operationId) => {\r\n            Swal.fire({\r\n                title: `Are you sure you want to delete operation ID: ${operationId}`,\r\n                text: \"\",\r\n                showCancelButton: true,\r\n                confirmButtonText: 'Yes',\r\n                cancelButtonText: 'Cancel',\r\n                focusConfirm: false,\r\n                preConfirm: async () => {\r\n                    // Call the API endpoint here\r\n                    let response = await fetch(`http://${IP}:3005/deleteOperation`, {\r\n                        method: 'DELETE',\r\n                        body: JSON.stringify({Operation_id: operationId}),\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    });\r\n        \r\n                    // Check the status of the response\r\n                    if (response.status === 200) {\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: 'Success',\r\n                            text: 'Operation deleted successfully'\r\n                        });\r\n                    } else {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Error',\r\n                            text: 'Failed to delete operation, something went wrong'\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n\r\n\r\nif (lineNameLoad) {\r\n    return <span>Loading...</span>\r\n    }\r\n \r\n\r\n\r\n    return (        \r\n        <div className=\"bg-slate-300 w-11/12 h-full flex flex-col\">\r\n            <div>\r\n                <h1 className=\"text-3xl pt-10 pb-10 text-center\">{lineName.length > 0 ? lineName[0].PLine_name : 'N/A'}</h1>\r\n            </div>\r\n            {operations.map((operation) => {\r\n                return (\r\n                    <div className=\"bg-white flex flex-col border\">\r\n                        <div className=\"flex frex-row mb-5 mt-5 items-center\">\r\n                            <div className=\"bg-white\">\r\n                                <p className=\"bg-slate-200 text-xl p-2 ml-4\">{operation.Operation_name}</p>\r\n                                <button className=\"ml-5 mt-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => deleteOperation(operation.Operation_id)}>Delete Operation</button>\r\n                            </div>\r\n                            <div className=\"ml-5 rounded-3xl p-3 border\">\r\n                                {processes.map((processGroup) => {\r\n                                const filteredProcesses = processGroup.filter((process) => process.Operation_id_Operation === operation.Operation_id);\r\n                                return filteredProcesses.map((process) => {\r\n                                    return (\r\n                                    <div className=\"w-full p-2\">\r\n                                        <a className=\"bg-white text underline underline-offset-4\" id={process.Process_id}>{process.Process_name}</a>\r\n                                        <a className=\"ml-5\">{process.Process_type}</a>\r\n                                        <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => changeProcess(process.Process_id, process.Process_name, process.Process_type)}>Change</button>\r\n                                        <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => deleteProcess(process.Process_id)}>Delete</button>\r\n                                    </div>\r\n                                    );\r\n                                });\r\n                                })}\r\n                                <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => addNewProcess(operation.Operation_id)}>+ Add new Process</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n                })}\r\n            <div className=\"pt-5 pl-5 pb-5 border\">\r\n                <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\" onClick={() => createNewOperation(lineId)}>+Add new Operation</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n}\r\nexport default AdminConfig;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}