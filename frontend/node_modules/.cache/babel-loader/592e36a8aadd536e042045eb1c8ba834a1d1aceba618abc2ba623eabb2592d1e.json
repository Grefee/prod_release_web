{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hujerp\\\\OneDrive - Webasto Group\\\\Dokumenty\\\\GitHub\\\\project_holec\\\\frontend\\\\src\\\\routes\\\\admin\\\\Config.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { QueryClient, QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function getOperations(IP, linkaId) {\n  let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: linkaId\n    })\n  });\n  return response.json();\n}\nasync function getProcesses(IP, linkaId) {\n  let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      PLine_id: linkaId\n    })\n  });\n  return response.json();\n}\nconst IP = '10.10.195.44';\nfunction AdminConfig() {\n  _s();\n  const {\n    lineId\n  } = useParams();\n  const {\n    isLoading,\n    operations\n  } = useQuery({\n    queryKey: ['typyLinek'],\n    queryFn: async () => await getOperations(IP, lineId),\n    initialData: []\n  });\n  const {\n    isLoadingX,\n    processes\n  } = useQuery({\n    queryKey: ['typyLinek'],\n    queryFn: async () => await getProcesses(IP, lineId),\n    initialData: []\n  });\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n  if (isLoadingX) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-slate-300 w-11/12 h-full flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl pt-10 pb-10 text-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-5 pl-5 pb-5 border\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\",\n        children: \"+Add new Operation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminConfig, \"rqdcgdQQ1BXdeJcluF7HoiKboss=\", false, function () {\n  return [useParams, useQuery, useQuery];\n});\n_c = AdminConfig;\nexport default AdminConfig;\nvar _c;\n$RefreshReg$(_c, \"AdminConfig\");","map":{"version":3,"names":["useEffect","QueryClient","QueryClientProvider","useQuery","useParams","getOperations","IP","linkaId","response","fetch","method","headers","body","JSON","stringify","PLine_id","json","getProcesses","AdminConfig","lineId","isLoading","operations","queryKey","queryFn","initialData","isLoadingX","processes"],"sources":["C:/Users/hujerp/OneDrive - Webasto Group/Dokumenty/GitHub/project_holec/frontend/src/routes/admin/Config.jsx"],"sourcesContent":["import { useEffect } from \"react\"\r\nimport {\r\n    QueryClient,\r\n    QueryClientProvider,\r\n    useQuery,\r\n  } from \"@tanstack/react-query\";\r\n\r\n  import { useParams } from 'react-router-dom';\r\n\r\n\r\nasync function getOperations(IP, linkaId){\r\n    let response = await fetch(`http://${IP}:3005/getOperationsByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\nasync function getProcesses(IP, linkaId){\r\n    let response = await fetch(`http://${IP}:3005/getProcessesByLineId`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            PLine_id: linkaId,\r\n        }),   \r\n    })\r\n    return response.json();\r\n}\r\n\r\nconst IP = '10.10.195.44'\r\n\r\nfunction AdminConfig() {\r\n    const { lineId } = useParams();\r\n    const {isLoading, operations} = useQuery({queryKey: ['typyLinek'], queryFn: async () => await getOperations(IP, lineId), initialData: []});\r\n    const {isLoadingX, processes} = useQuery({queryKey: ['typyLinek'], queryFn: async () => await getProcesses(IP, lineId), initialData: []});  \r\n    \r\n    \r\n    if (isLoading) {\r\n        return <span>Loading...</span>\r\n        }\r\n    if (isLoadingX) {\r\n        return <span>Loading...</span>\r\n        }\r\n\r\n    return (        \r\n        <div className=\"bg-slate-300 w-11/12 h-full flex flex-col\">\r\n            <div>\r\n                <h1 className=\"text-3xl pt-10 pb-10 text-center\"></h1>\r\n            </div>\r\n            \r\n            <div className=\"pt-5 pl-5 pb-5 border\">\r\n                <button className=\"ml-5 rounded-full bg-slate-200 hover:bg-slate-400 p-2\">+Add new Operation</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default AdminConfig;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SACIC,WAAW,EACXC,mBAAmB,EACnBC,QAAQ,QACH,uBAAuB;AAE9B,SAASC,SAAS,QAAQ,kBAAkB;AAAC;AAG/C,eAAeC,aAAa,CAACC,EAAE,EAAEC,OAAO,EAAC;EACrC,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,UAASH,EAAG,6BAA4B,EAAE;IAClEI,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,QAAQ,EAAER;IACd,CAAC;EACL,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACQ,IAAI,EAAE;AAC1B;AACA,eAAeC,YAAY,CAACX,EAAE,EAAEC,OAAO,EAAC;EACpC,IAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,UAASH,EAAG,4BAA2B,EAAE;IACjEI,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,QAAQ,EAAER;IACd,CAAC;EACL,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACQ,IAAI,EAAE;AAC1B;AAEA,MAAMV,EAAE,GAAG,cAAc;AAEzB,SAASY,WAAW,GAAG;EAAA;EACnB,MAAM;IAAEC;EAAO,CAAC,GAAGf,SAAS,EAAE;EAC9B,MAAM;IAACgB,SAAS;IAAEC;EAAU,CAAC,GAAGlB,QAAQ,CAAC;IAACmB,QAAQ,EAAE,CAAC,WAAW,CAAC;IAAEC,OAAO,EAAE,YAAY,MAAMlB,aAAa,CAACC,EAAE,EAAEa,MAAM,CAAC;IAAEK,WAAW,EAAE;EAAE,CAAC,CAAC;EAC1I,MAAM;IAACC,UAAU;IAAEC;EAAS,CAAC,GAAGvB,QAAQ,CAAC;IAACmB,QAAQ,EAAE,CAAC,WAAW,CAAC;IAAEC,OAAO,EAAE,YAAY,MAAMN,YAAY,CAACX,EAAE,EAAEa,MAAM,CAAC;IAAEK,WAAW,EAAE;EAAE,CAAC,CAAC;EAGzI,IAAIJ,SAAS,EAAE;IACX,oBAAO;MAAA,UAAM;IAAU;MAAA;MAAA;MAAA;IAAA,QAAO;EAC9B;EACJ,IAAIK,UAAU,EAAE;IACZ,oBAAO;MAAA,UAAM;IAAU;MAAA;MAAA;MAAA;IAAA,QAAO;EAC9B;EAEJ,oBACI;IAAK,SAAS,EAAC,2CAA2C;IAAA,wBACtD;MAAA,uBACI;QAAI,SAAS,EAAC;MAAkC;QAAA;QAAA;QAAA;MAAA;IAAM;MAAA;MAAA;MAAA;IAAA,QACpD,eAEN;MAAK,SAAS,EAAC,uBAAuB;MAAA,uBAClC;QAAQ,SAAS,EAAC,uDAAuD;QAAA,UAAC;MAAkB;QAAA;QAAA;QAAA;MAAA;IAAS;MAAA;MAAA;MAAA;IAAA,QACnG;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd;AAAC,GAxBQP,WAAW;EAAA,QACGd,SAAS,EACID,QAAQ,EACRA,QAAQ;AAAA;AAAA,KAHnCe,WAAW;AAyBpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}